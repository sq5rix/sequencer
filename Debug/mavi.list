
mavi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000564c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d24  08005d24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  08005d9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08005d9c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a42  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026a2  00000000  00000000  00030ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270fb  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c213  00000000  00000000  0005b9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e73d5  00000000  00000000  00067c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0014efdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  0014f05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057bc 	.word	0x080057bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080057bc 	.word	0x080057bc

080001c8 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4604      	mov	r4, r0
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4623      	mov	r3, r4
 80001d8:	80fb      	strh	r3, [r7, #6]
 80001da:	4603      	mov	r3, r0
 80001dc:	80bb      	strh	r3, [r7, #4]
 80001de:	460b      	mov	r3, r1
 80001e0:	70fb      	strb	r3, [r7, #3]
 80001e2:	4613      	mov	r3, r2
 80001e4:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80001e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001ea:	2b7f      	cmp	r3, #127	; 0x7f
 80001ec:	f300 8102 	bgt.w	80003f4 <GFX_draw_char+0x22c>
 80001f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80001f4:	2b3f      	cmp	r3, #63	; 0x3f
 80001f6:	f300 80fd 	bgt.w	80003f4 <GFX_draw_char+0x22c>
 80001fa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80001fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000202:	4613      	mov	r3, r2
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	4413      	add	r3, r2
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	440b      	add	r3, r1
 800020c:	3b01      	subs	r3, #1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f2c0 80f0 	blt.w	80003f4 <GFX_draw_char+0x22c>
 8000214:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000218:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	4413      	add	r3, r2
 8000220:	3b01      	subs	r3, #1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f2c0 80e6 	blt.w	80003f4 <GFX_draw_char+0x22c>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000228:	2300      	movs	r3, #0
 800022a:	73fb      	strb	r3, [r7, #15]
 800022c:	e0aa      	b.n	8000384 <GFX_draw_char+0x1bc>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800022e:	78fa      	ldrb	r2, [r7, #3]
 8000230:	4613      	mov	r3, r2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	441a      	add	r2, r3
 8000236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800023a:	4413      	add	r3, r2
 800023c:	4a6f      	ldr	r2, [pc, #444]	; (80003fc <GFX_draw_char+0x234>)
 800023e:	5cd3      	ldrb	r3, [r2, r3]
 8000240:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000242:	2307      	movs	r3, #7
 8000244:	73bb      	strb	r3, [r7, #14]
 8000246:	e092      	b.n	800036e <GFX_draw_char+0x1a6>
		{
			if(line & 1)
 8000248:	7b7b      	ldrb	r3, [r7, #13]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d040      	beq.n	80002d4 <GFX_draw_char+0x10c>
			{
				if(size_x == 1 && size_y == 1)
 8000252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000256:	2b01      	cmp	r3, #1
 8000258:	d116      	bne.n	8000288 <GFX_draw_char+0xc0>
 800025a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800025e:	2b01      	cmp	r3, #1
 8000260:	d112      	bne.n	8000288 <GFX_draw_char+0xc0>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000266:	b29a      	uxth	r2, r3
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	4413      	add	r3, r2
 800026c:	b29b      	uxth	r3, r3
 800026e:	b218      	sxth	r0, r3
 8000270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000274:	b29a      	uxth	r2, r3
 8000276:	88bb      	ldrh	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	b29b      	uxth	r3, r3
 800027c:	b21b      	sxth	r3, r3
 800027e:	883a      	ldrh	r2, [r7, #0]
 8000280:	4619      	mov	r1, r3
 8000282:	f000 f9bd 	bl	8000600 <SSD1306_draw_pixel>
 8000286:	e069      	b.n	800035c <GFX_draw_char+0x194>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800028c:	b29a      	uxth	r2, r3
 800028e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000292:	b29b      	uxth	r3, r3
 8000294:	fb12 f303 	smulbb	r3, r2, r3
 8000298:	b29a      	uxth	r2, r3
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4413      	add	r3, r2
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b218      	sxth	r0, r3
 80002a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	fb12 f303 	smulbb	r3, r2, r3
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	88bb      	ldrh	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b219      	sxth	r1, r3
 80002bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002c6:	b21c      	sxth	r4, r3
 80002c8:	883b      	ldrh	r3, [r7, #0]
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	4623      	mov	r3, r4
 80002ce:	f000 f897 	bl	8000400 <GFX_draw_fill_rect>
 80002d2:	e043      	b.n	800035c <GFX_draw_char+0x194>
				}
			}
			else if(bg != color)
 80002d4:	8c3a      	ldrh	r2, [r7, #32]
 80002d6:	883b      	ldrh	r3, [r7, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d03f      	beq.n	800035c <GFX_draw_char+0x194>
			{
				if(size_x == 1 && size_y == 1)
 80002dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d116      	bne.n	8000312 <GFX_draw_char+0x14a>
 80002e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d112      	bne.n	8000312 <GFX_draw_char+0x14a>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80002ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	4413      	add	r3, r2
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	b218      	sxth	r0, r3
 80002fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002fe:	b29a      	uxth	r2, r3
 8000300:	88bb      	ldrh	r3, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	b29b      	uxth	r3, r3
 8000306:	b21b      	sxth	r3, r3
 8000308:	8c3a      	ldrh	r2, [r7, #32]
 800030a:	4619      	mov	r1, r3
 800030c:	f000 f978 	bl	8000600 <SSD1306_draw_pixel>
 8000310:	e024      	b.n	800035c <GFX_draw_char+0x194>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000316:	b29a      	uxth	r2, r3
 8000318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800031c:	b29b      	uxth	r3, r3
 800031e:	fb12 f303 	smulbb	r3, r2, r3
 8000322:	b29a      	uxth	r2, r3
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	4413      	add	r3, r2
 8000328:	b29b      	uxth	r3, r3
 800032a:	b218      	sxth	r0, r3
 800032c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000330:	b29a      	uxth	r2, r3
 8000332:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000336:	b29b      	uxth	r3, r3
 8000338:	fb12 f303 	smulbb	r3, r2, r3
 800033c:	b29a      	uxth	r2, r3
 800033e:	88bb      	ldrh	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	b29b      	uxth	r3, r3
 8000344:	b219      	sxth	r1, r3
 8000346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800034a:	b21a      	sxth	r2, r3
 800034c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000350:	b21c      	sxth	r4, r3
 8000352:	8c3b      	ldrh	r3, [r7, #32]
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	4623      	mov	r3, r4
 8000358:	f000 f852 	bl	8000400 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800035c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3b01      	subs	r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	73bb      	strb	r3, [r7, #14]
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	085b      	lsrs	r3, r3, #1
 800036c:	737b      	strb	r3, [r7, #13]
 800036e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000372:	2b00      	cmp	r3, #0
 8000374:	f6bf af68 	bge.w	8000248 <GFX_draw_char+0x80>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000388:	2b04      	cmp	r3, #4
 800038a:	f77f af50 	ble.w	800022e <GFX_draw_char+0x66>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800038e:	8c3a      	ldrh	r2, [r7, #32]
 8000390:	883b      	ldrh	r3, [r7, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d02f      	beq.n	80003f6 <GFX_draw_char+0x22e>
	{
		if(size_x == 1 && size_y == 1)
 8000396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800039a:	2b01      	cmp	r3, #1
 800039c:	d10e      	bne.n	80003bc <GFX_draw_char+0x1f4>
 800039e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d10a      	bne.n	80003bc <GFX_draw_char+0x1f4>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	3305      	adds	r3, #5
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	b218      	sxth	r0, r3
 80003ae:	8c3b      	ldrh	r3, [r7, #32]
 80003b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003b4:	2208      	movs	r2, #8
 80003b6:	f000 fa93 	bl	80008e0 <SSD1306_draw_fast_vline>
 80003ba:	e01c      	b.n	80003f6 <GFX_draw_char+0x22e>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80003bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	4413      	add	r3, r2
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	b218      	sxth	r0, r3
 80003d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003d6:	b21a      	sxth	r2, r3
 80003d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003dc:	b29b      	uxth	r3, r3
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	b21c      	sxth	r4, r3
 80003e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80003e8:	8c3b      	ldrh	r3, [r7, #32]
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	4623      	mov	r3, r4
 80003ee:	f000 f807 	bl	8000400 <GFX_draw_fill_rect>
 80003f2:	e000      	b.n	80003f6 <GFX_draw_char+0x22e>
		return;
 80003f4:	bf00      	nop
		}
	}
}
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd90      	pop	{r4, r7, pc}
 80003fc:	080057d4 	.word	0x080057d4

08000400 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	4604      	mov	r4, r0
 8000408:	4608      	mov	r0, r1
 800040a:	4611      	mov	r1, r2
 800040c:	461a      	mov	r2, r3
 800040e:	4623      	mov	r3, r4
 8000410:	80fb      	strh	r3, [r7, #6]
 8000412:	4603      	mov	r3, r0
 8000414:	80bb      	strh	r3, [r7, #4]
 8000416:	460b      	mov	r3, r1
 8000418:	807b      	strh	r3, [r7, #2]
 800041a:	4613      	mov	r3, r2
 800041c:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 800041e:	88fb      	ldrh	r3, [r7, #6]
 8000420:	81fb      	strh	r3, [r7, #14]
 8000422:	e00e      	b.n	8000442 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000424:	8c3b      	ldrh	r3, [r7, #32]
 8000426:	f9b7 2000 	ldrsh.w	r2, [r7]
 800042a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800042e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000432:	f000 fa55 	bl	80008e0 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8000436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800043a:	b29b      	uxth	r3, r3
 800043c:	3301      	adds	r3, #1
 800043e:	b29b      	uxth	r3, r3
 8000440:	81fb      	strh	r3, [r7, #14]
 8000442:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000446:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800044a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800044e:	440b      	add	r3, r1
 8000450:	429a      	cmp	r2, r3
 8000452:	dbe7      	blt.n	8000424 <GFX_draw_fill_rect+0x24>
	}
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af04      	add	r7, sp, #16
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4613      	mov	r3, r2
 800046a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	b29a      	uxth	r2, r3
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	9302      	str	r3, [sp, #8]
 8000474:	88bb      	ldrh	r3, [r7, #4]
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2301      	movs	r3, #1
 800047e:	2178      	movs	r1, #120	; 0x78
 8000480:	4803      	ldr	r0, [pc, #12]	; (8000490 <platform_write+0x34>)
 8000482:	f001 ff13 	bl	80022ac <HAL_I2C_Mem_Write>
	return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000fc 	.word	0x200000fc

08000494 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	88bb      	ldrh	r3, [r7, #4]
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2301      	movs	r3, #1
 80004b2:	2178      	movs	r1, #120	; 0x78
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <platform_write_dma+0x30>)
 80004b6:	f002 f80d 	bl	80024d4 <HAL_I2C_Mem_Write_DMA>
	return 0;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000fc 	.word	0x200000fc

080004c8 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	2201      	movs	r2, #1
 80004d6:	4619      	mov	r1, r3
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ffbf 	bl	800045c <platform_write>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <SSD1306_init>:

bool SSD1306_init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 80004ee:	2302      	movs	r3, #2
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	238f      	movs	r3, #143	; 0x8f
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	2302      	movs	r3, #2
 80004f8:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <SSD1306_init+0x114>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10d      	bne.n	800051e <SSD1306_init+0x36>
 8000502:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000506:	f005 f8dd 	bl	80056c4 <malloc>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b3b      	ldr	r3, [pc, #236]	; (80005fc <SSD1306_init+0x114>)
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <SSD1306_init+0x114>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d101      	bne.n	800051e <SSD1306_init+0x36>
  {
    return false;
 800051a:	2300      	movs	r3, #0
 800051c:	e06a      	b.n	80005f4 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 800051e:	f000 f943 	bl	80007a8 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000522:	20ae      	movs	r0, #174	; 0xae
 8000524:	f7ff ffd0 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8000528:	20d5      	movs	r0, #213	; 0xd5
 800052a:	f7ff ffcd 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800052e:	20e0      	movs	r0, #224	; 0xe0
 8000530:	f7ff ffca 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8000534:	20a8      	movs	r0, #168	; 0xa8
 8000536:	f7ff ffc7 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800053a:	203f      	movs	r0, #63	; 0x3f
 800053c:	f7ff ffc4 	bl	80004c8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8000540:	20d3      	movs	r0, #211	; 0xd3
 8000542:	f7ff ffc1 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ffbe 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 800054c:	2040      	movs	r0, #64	; 0x40
 800054e:	f7ff ffbb 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 8000552:	208d      	movs	r0, #141	; 0x8d
 8000554:	f7ff ffb8 	bl	80004c8 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d101      	bne.n	8000562 <SSD1306_init+0x7a>
 800055e:	2310      	movs	r3, #16
 8000560:	e000      	b.n	8000564 <SSD1306_init+0x7c>
 8000562:	2314      	movs	r3, #20
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffaf 	bl	80004c8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 800056a:	2020      	movs	r0, #32
 800056c:	f7ff ffac 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ffa9 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 8000576:	20b0      	movs	r0, #176	; 0xb0
 8000578:	f7ff ffa6 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 800057c:	20c8      	movs	r0, #200	; 0xc8
 800057e:	f7ff ffa3 	bl	80004c8 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 8000582:	2312      	movs	r3, #18
 8000584:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d101      	bne.n	8000590 <SSD1306_init+0xa8>
 800058c:	239f      	movs	r3, #159	; 0x9f
 800058e:	e000      	b.n	8000592 <SSD1306_init+0xaa>
 8000590:	23cf      	movs	r3, #207	; 0xcf
 8000592:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000594:	20da      	movs	r0, #218	; 0xda
 8000596:	f7ff ff97 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff93 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80005a2:	2081      	movs	r0, #129	; 0x81
 80005a4:	f7ff ff90 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff8c 	bl	80004c8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 80005b0:	20d9      	movs	r0, #217	; 0xd9
 80005b2:	f7ff ff89 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d101      	bne.n	80005c0 <SSD1306_init+0xd8>
 80005bc:	2322      	movs	r3, #34	; 0x22
 80005be:	e000      	b.n	80005c2 <SSD1306_init+0xda>
 80005c0:	23f1      	movs	r3, #241	; 0xf1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff80 	bl	80004c8 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 80005c8:	20db      	movs	r0, #219	; 0xdb
 80005ca:	f7ff ff7d 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 80005ce:	2040      	movs	r0, #64	; 0x40
 80005d0:	f7ff ff7a 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 80005d4:	20a4      	movs	r0, #164	; 0xa4
 80005d6:	f7ff ff77 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 80005da:	20a6      	movs	r0, #166	; 0xa6
 80005dc:	f7ff ff74 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 80005e0:	202e      	movs	r0, #46	; 0x2e
 80005e2:	f7ff ff71 	bl	80004c8 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 80005e6:	20af      	movs	r0, #175	; 0xaf
 80005e8:	f7ff ff6e 	bl	80004c8 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 fb0b 	bl	8000c08 <SSD1306_set_rotation>
  return true;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000008c 	.word	0x2000008c

08000600 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f2c0 80c0 	blt.w	800079c <SSD1306_draw_pixel+0x19c>
 800061c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000620:	2b7f      	cmp	r3, #127	; 0x7f
 8000622:	f300 80bb 	bgt.w	800079c <SSD1306_draw_pixel+0x19c>
 8000626:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	f2c0 80b6 	blt.w	800079c <SSD1306_draw_pixel+0x19c>
 8000630:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000634:	2b3f      	cmp	r3, #63	; 0x3f
 8000636:	f300 80b1 	bgt.w	800079c <SSD1306_draw_pixel+0x19c>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 800063a:	f000 faf5 	bl	8000c28 <SSD1306_get_rotation>
 800063e:	4603      	mov	r3, r0
 8000640:	2b02      	cmp	r3, #2
 8000642:	d015      	beq.n	8000670 <SSD1306_draw_pixel+0x70>
 8000644:	2b03      	cmp	r3, #3
 8000646:	d01e      	beq.n	8000686 <SSD1306_draw_pixel+0x86>
 8000648:	2b01      	cmp	r3, #1
 800064a:	d12e      	bne.n	80006aa <SSD1306_draw_pixel+0xaa>
		{
			case 1:
				ssd1306_swap(x, y);
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	4053      	eors	r3, r2
 8000652:	80fb      	strh	r3, [r7, #6]
 8000654:	88ba      	ldrh	r2, [r7, #4]
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4053      	eors	r3, r2
 800065a:	80bb      	strh	r3, [r7, #4]
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	4053      	eors	r3, r2
 8000662:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800066a:	b29b      	uxth	r3, r3
 800066c:	80fb      	strh	r3, [r7, #6]
				break;
 800066e:	e01c      	b.n	80006aa <SSD1306_draw_pixel+0xaa>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000676:	b29b      	uxth	r3, r3
 8000678:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000680:	b29b      	uxth	r3, r3
 8000682:	80bb      	strh	r3, [r7, #4]
				break;
 8000684:	e011      	b.n	80006aa <SSD1306_draw_pixel+0xaa>
			case 3:
				ssd1306_swap(x, y);
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	4053      	eors	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
 800068e:	88ba      	ldrh	r2, [r7, #4]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	4053      	eors	r3, r2
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	88bb      	ldrh	r3, [r7, #4]
 800069a:	4053      	eors	r3, r2
 800069c:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	80bb      	strh	r3, [r7, #4]
				break;
 80006a8:	bf00      	nop
		}

		switch (color)
 80006aa:	887b      	ldrh	r3, [r7, #2]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d004      	beq.n	80006ba <SSD1306_draw_pixel+0xba>
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d04e      	beq.n	8000752 <SSD1306_draw_pixel+0x152>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d025      	beq.n	8000704 <SSD1306_draw_pixel+0x104>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
				break;
		}
	}
}
 80006b8:	e070      	b.n	800079c <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80006c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da00      	bge.n	80006cc <SSD1306_draw_pixel+0xcc>
 80006ca:	3307      	adds	r3, #7
 80006cc:	10db      	asrs	r3, r3, #3
 80006ce:	b218      	sxth	r0, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	01db      	lsls	r3, r3, #7
 80006d4:	440b      	add	r3, r1
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25c      	sxtb	r4, r3
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80006f6:	4602      	mov	r2, r0
 80006f8:	01d2      	lsls	r2, r2, #7
 80006fa:	440a      	add	r2, r1
 80006fc:	4413      	add	r3, r2
 80006fe:	b2e2      	uxtb	r2, r4
 8000700:	701a      	strb	r2, [r3, #0]
				break;
 8000702:	e04b      	b.n	800079c <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800070c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	da00      	bge.n	8000716 <SSD1306_draw_pixel+0x116>
 8000714:	3307      	adds	r3, #7
 8000716:	10db      	asrs	r3, r3, #3
 8000718:	b218      	sxth	r0, r3
 800071a:	4603      	mov	r3, r0
 800071c:	01db      	lsls	r3, r3, #7
 800071e:	440b      	add	r3, r1
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b25a      	sxtb	r2, r3
 8000726:	88bb      	ldrh	r3, [r7, #4]
 8000728:	f003 0307 	and.w	r3, r3, #7
 800072c:	2101      	movs	r1, #1
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	b25b      	sxtb	r3, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4013      	ands	r3, r2
 800073a:	b25c      	sxtb	r4, r3
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000744:	4602      	mov	r2, r0
 8000746:	01d2      	lsls	r2, r2, #7
 8000748:	440a      	add	r2, r1
 800074a:	4413      	add	r3, r2
 800074c:	b2e2      	uxtb	r2, r4
 800074e:	701a      	strb	r2, [r3, #0]
				break;
 8000750:	e024      	b.n	800079c <SSD1306_draw_pixel+0x19c>
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800075a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	da00      	bge.n	8000764 <SSD1306_draw_pixel+0x164>
 8000762:	3307      	adds	r3, #7
 8000764:	10db      	asrs	r3, r3, #3
 8000766:	b218      	sxth	r0, r3
 8000768:	4603      	mov	r3, r0
 800076a:	01db      	lsls	r3, r3, #7
 800076c:	440b      	add	r3, r1
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25a      	sxtb	r2, r3
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4053      	eors	r3, r2
 8000784:	b25c      	sxtb	r4, r3
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SSD1306_draw_pixel+0x1a4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800078e:	4602      	mov	r2, r0
 8000790:	01d2      	lsls	r2, r2, #7
 8000792:	440a      	add	r2, r1
 8000794:	4413      	add	r3, r2
 8000796:	b2e2      	uxtb	r2, r4
 8000798:	701a      	strb	r2, [r3, #0]
				break;
 800079a:	bf00      	nop
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SSD1306_display_clear+0x18>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 ff8c 	bl	80056d4 <memset>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000008c 	.word	0x2000008c

080007c4 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80007c4:	b490      	push	{r4, r7}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4604      	mov	r4, r0
 80007cc:	4608      	mov	r0, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4623      	mov	r3, r4
 80007d4:	80fb      	strh	r3, [r7, #6]
 80007d6:	4603      	mov	r3, r0
 80007d8:	80bb      	strh	r3, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	807b      	strh	r3, [r7, #2]
 80007de:	4613      	mov	r3, r2
 80007e0:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 80007e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db73      	blt.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
 80007ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ee:	2b3f      	cmp	r3, #63	; 0x3f
 80007f0:	dc6f      	bgt.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
	{
		// Y coord in bounds?
		if (x < 0)
 80007f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da06      	bge.n	8000808 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 80007fa:	887a      	ldrh	r2, [r7, #2]
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	4413      	add	r3, r2
 8000800:	b29b      	uxth	r3, r3
 8000802:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000808:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800080c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000810:	4413      	add	r3, r2
 8000812:	2b80      	cmp	r3, #128	; 0x80
 8000814:	dd04      	ble.n	8000820 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800081c:	b29b      	uxth	r3, r3
 800081e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd54      	ble.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <SSD1306_draw_fast_hline_internal+0x118>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	da00      	bge.n	8000836 <SSD1306_draw_fast_hline_internal+0x72>
 8000834:	3307      	adds	r3, #7
 8000836:	10db      	asrs	r3, r3, #3
 8000838:	b21b      	sxth	r3, r3
 800083a:	01d9      	lsls	r1, r3, #7
 800083c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000840:	440b      	add	r3, r1
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	2201      	movs	r2, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000854:	883b      	ldrh	r3, [r7, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d00c      	beq.n	8000874 <SSD1306_draw_fast_hline_internal+0xb0>
 800085a:	2b02      	cmp	r3, #2
 800085c:	d030      	beq.n	80008c0 <SSD1306_draw_fast_hline_internal+0xfc>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d011      	beq.n	8000886 <SSD1306_draw_fast_hline_internal+0xc2>
					};
					break;
			}
		}
	}
}
 8000862:	e036      	b.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
						*pBuf++ |= mask;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60fa      	str	r2, [r7, #12]
 800086a:	7819      	ldrb	r1, [r3, #0]
 800086c:	7afa      	ldrb	r2, [r7, #11]
 800086e:	430a      	orrs	r2, r1
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000874:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000878:	b29a      	uxth	r2, r3
 800087a:	3a01      	subs	r2, #1
 800087c:	b292      	uxth	r2, r2
 800087e:	807a      	strh	r2, [r7, #2]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1ef      	bne.n	8000864 <SSD1306_draw_fast_hline_internal+0xa0>
					break;
 8000884:	e025      	b.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
					mask = ~mask;
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	43db      	mvns	r3, r3
 800088a:	72fb      	strb	r3, [r7, #11]
					while (w--)
 800088c:	e007      	b.n	800089e <SSD1306_draw_fast_hline_internal+0xda>
						*pBuf++ &= mask;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	60fa      	str	r2, [r7, #12]
 8000894:	7819      	ldrb	r1, [r3, #0]
 8000896:	7afa      	ldrb	r2, [r7, #11]
 8000898:	400a      	ands	r2, r1
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	701a      	strb	r2, [r3, #0]
					while (w--)
 800089e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	3a01      	subs	r2, #1
 80008a6:	b292      	uxth	r2, r2
 80008a8:	807a      	strh	r2, [r7, #2]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1ef      	bne.n	800088e <SSD1306_draw_fast_hline_internal+0xca>
					break;
 80008ae:	e010      	b.n	80008d2 <SSD1306_draw_fast_hline_internal+0x10e>
						*pBuf++ ^= mask;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	7819      	ldrb	r1, [r3, #0]
 80008b8:	7afa      	ldrb	r2, [r7, #11]
 80008ba:	404a      	eors	r2, r1
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	701a      	strb	r2, [r3, #0]
					while (w--)
 80008c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	3a01      	subs	r2, #1
 80008c8:	b292      	uxth	r2, r2
 80008ca:	807a      	strh	r2, [r7, #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ef      	bne.n	80008b0 <SSD1306_draw_fast_hline_internal+0xec>
					break;
 80008d0:	bf00      	nop
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc90      	pop	{r4, r7}
 80008da:	4770      	bx	lr
 80008dc:	2000008c 	.word	0x2000008c

080008e0 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4604      	mov	r4, r0
 80008e8:	4608      	mov	r0, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	4623      	mov	r3, r4
 80008f0:	80fb      	strh	r3, [r7, #6]
 80008f2:	4603      	mov	r3, r0
 80008f4:	80bb      	strh	r3, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	807b      	strh	r3, [r7, #2]
 80008fa:	4613      	mov	r3, r2
 80008fc:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000902:	f000 f991 	bl	8000c28 <SSD1306_get_rotation>
 8000906:	4603      	mov	r3, r0
 8000908:	2b02      	cmp	r3, #2
 800090a:	d01e      	beq.n	800094a <SSD1306_draw_fast_vline+0x6a>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d02e      	beq.n	800096e <SSD1306_draw_fast_vline+0x8e>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d140      	bne.n	8000996 <SSD1306_draw_fast_vline+0xb6>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	4053      	eors	r3, r2
 800091e:	80fb      	strh	r3, [r7, #6]
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4053      	eors	r3, r2
 8000926:	80bb      	strh	r3, [r7, #4]
 8000928:	88fa      	ldrh	r2, [r7, #6]
 800092a:	88bb      	ldrh	r3, [r7, #4]
 800092c:	4053      	eors	r3, r2
 800092e:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000936:	b29b      	uxth	r3, r3
 8000938:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b29b      	uxth	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b29b      	uxth	r3, r3
 8000946:	80fb      	strh	r3, [r7, #6]
  			break;
 8000948:	e025      	b.n	8000996 <SSD1306_draw_fast_vline+0xb6>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000950:	b29b      	uxth	r3, r3
 8000952:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800095a:	b29b      	uxth	r3, r3
 800095c:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 800095e:	88ba      	ldrh	r2, [r7, #4]
 8000960:	887b      	ldrh	r3, [r7, #2]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	3301      	adds	r3, #1
 8000968:	b29b      	uxth	r3, r3
 800096a:	80bb      	strh	r3, [r7, #4]
  	    	break;
 800096c:	e013      	b.n	8000996 <SSD1306_draw_fast_vline+0xb6>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000972:	88fa      	ldrh	r2, [r7, #6]
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	4053      	eors	r3, r2
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	88ba      	ldrh	r2, [r7, #4]
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	4053      	eors	r3, r2
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	4053      	eors	r3, r2
 8000988:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000990:	b29b      	uxth	r3, r3
 8000992:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000994:	bf00      	nop
	}

	if (bSwap)
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d009      	beq.n	80009b0 <SSD1306_draw_fast_vline+0xd0>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 800099c:	883b      	ldrh	r3, [r7, #0]
 800099e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009aa:	f7ff ff0b 	bl	80007c4 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 80009ae:	e008      	b.n	80009c2 <SSD1306_draw_fast_vline+0xe2>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 80009b0:	883b      	ldrh	r3, [r7, #0]
 80009b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009be:	f000 f805 	bl	80009cc <SSD1306_draw_fast_vline_internal>
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}
	...

080009cc <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80009cc:	b490      	push	{r4, r7}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4608      	mov	r0, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	461a      	mov	r2, r3
 80009da:	4623      	mov	r3, r4
 80009dc:	80fb      	strh	r3, [r7, #6]
 80009de:	4603      	mov	r3, r0
 80009e0:	80bb      	strh	r3, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	807b      	strh	r3, [r7, #2]
 80009e6:	4613      	mov	r3, r2
 80009e8:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 80009ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f2c0 80d8 	blt.w	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	2b7f      	cmp	r3, #127	; 0x7f
 80009fa:	f300 80d3 	bgt.w	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
	{
		// X coord in bounds?
		if (__y < 0)
 80009fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da06      	bge.n	8000a14 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000a14:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2b40      	cmp	r3, #64	; 0x40
 8000a20:	dd04      	ble.n	8000a2c <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f340 80b7 	ble.w	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	737b      	strb	r3, [r7, #13]
 8000a3a:	887b      	ldrh	r3, [r7, #2]
 8000a3c:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000a3e:	4b5c      	ldr	r3, [pc, #368]	; (8000bb0 <SSD1306_draw_fast_vline_internal+0x1e4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	7b7a      	ldrb	r2, [r7, #13]
 8000a44:	08d2      	lsrs	r2, r2, #3
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	01d1      	lsls	r1, r2, #7
 8000a4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a4e:	440a      	add	r2, r1
 8000a50:	4413      	add	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000a54:	7b7b      	ldrb	r3, [r7, #13]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d03f      	beq.n	8000ae2 <SSD1306_draw_fast_vline_internal+0x116>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	f1c3 0308 	rsb	r3, r3, #8
 8000a68:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	4a51      	ldr	r2, [pc, #324]	; (8000bb4 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000a72:	7dfa      	ldrb	r2, [r7, #23]
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d20b      	bcs.n	8000a92 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8000a7a:	7bfa      	ldrb	r2, [r7, #15]
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	22ff      	movs	r2, #255	; 0xff
 8000a82:	fa42 f303 	asr.w	r3, r2, r3
 8000a86:	b25a      	sxtb	r2, r3
 8000a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000a92:	883b      	ldrh	r3, [r7, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d004      	beq.n	8000aa2 <SSD1306_draw_fast_vline_internal+0xd6>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d017      	beq.n	8000acc <SSD1306_draw_fast_vline_internal+0x100>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <SSD1306_draw_fast_vline_internal+0xe6>
 8000aa0:	e01c      	b.n	8000adc <SSD1306_draw_fast_vline_internal+0x110>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	701a      	strb	r2, [r3, #0]
						break;
 8000ab0:	e014      	b.n	8000adc <SSD1306_draw_fast_vline_internal+0x110>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	701a      	strb	r2, [r3, #0]
						break;
 8000aca:	e007      	b.n	8000adc <SSD1306_draw_fast_vline_internal+0x110>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	701a      	strb	r2, [r3, #0]
						break;
 8000ada:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	3380      	adds	r3, #128	; 0x80
 8000ae0:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000ae2:	7dfa      	ldrb	r2, [r7, #23]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d35c      	bcc.n	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
			{
				// More to go?
				h -= mod;
 8000aea:	7dfa      	ldrb	r2, [r7, #23]
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000af2:	7dfb      	ldrb	r3, [r7, #23]
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	d925      	bls.n	8000b44 <SSD1306_draw_fast_vline_internal+0x178>
				{
					if (color == SSD1306_INVERSE)
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d10f      	bne.n	8000b1e <SSD1306_draw_fast_vline_internal+0x152>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	3380      	adds	r3, #128	; 0x80
 8000b0e:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	3b08      	subs	r3, #8
 8000b14:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	d8f0      	bhi.n	8000afe <SSD1306_draw_fast_vline_internal+0x132>
 8000b1c:	e012      	b.n	8000b44 <SSD1306_draw_fast_vline_internal+0x178>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SSD1306_draw_fast_vline_internal+0x15c>
 8000b24:	23ff      	movs	r3, #255	; 0xff
 8000b26:	e000      	b.n	8000b2a <SSD1306_draw_fast_vline_internal+0x15e>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	7b3a      	ldrb	r2, [r7, #12]
 8000b30:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	3380      	adds	r3, #128	; 0x80
 8000b36:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d8f3      	bhi.n	8000b2c <SSD1306_draw_fast_vline_internal+0x160>
					}
				}

				if (h)
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d02c      	beq.n	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000b5a:	883b      	ldrh	r3, [r7, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d004      	beq.n	8000b6a <SSD1306_draw_fast_vline_internal+0x19e>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d017      	beq.n	8000b94 <SSD1306_draw_fast_vline_internal+0x1c8>
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <SSD1306_draw_fast_vline_internal+0x1ae>
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8000b68:	e01c      	b.n	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf |= mask;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	7afb      	ldrb	r3, [r7, #11]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	701a      	strb	r2, [r3, #0]
							break;
 8000b78:	e014      	b.n	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf &= ~mask;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	701a      	strb	r2, [r3, #0]
							break;
 8000b92:	e007      	b.n	8000ba4 <SSD1306_draw_fast_vline_internal+0x1d8>
							*pBuf ^= mask;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	7afb      	ldrb	r3, [r7, #11]
 8000b9a:	4053      	eors	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	701a      	strb	r2, [r3, #0]
							break;
 8000ba2:	bf00      	nop
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc90      	pop	{r4, r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000008c 	.word	0x2000008c
 8000bb4:	08005cd4 	.word	0x08005cd4
 8000bb8:	08005cdc 	.word	0x08005cdc

08000bbc <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8000bc8:	2022      	movs	r0, #34	; 0x22
 8000bca:	f7ff fc7d 	bl	80004c8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fc7a 	bl	80004c8 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8000bd4:	20ff      	movs	r0, #255	; 0xff
 8000bd6:	f7ff fc77 	bl	80004c8 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8000bda:	2021      	movs	r0, #33	; 0x21
 8000bdc:	f7ff fc74 	bl	80004c8 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fc71 	bl	80004c8 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8000be6:	207f      	movs	r0, #127	; 0x7f
 8000be8:	f7ff fc6e 	bl	80004c8 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SSD1306_display_repaint+0x48>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2040      	movs	r0, #64	; 0x40
 8000bf6:	f7ff fc4d 	bl	8000494 <platform_write_dma>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000008c 	.word	0x2000008c

08000c08 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <SSD1306_set_rotation+0x1c>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	7013      	strb	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000090 	.word	0x20000090

08000c28 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return rotation;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <SSD1306_get_rotation+0x14>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000090 	.word	0x20000090

08000c40 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2224      	movs	r2, #36	; 0x24
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fd41 	bl	80056d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_DAC1_Init+0x5c>)
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_DAC1_Init+0x60>)
 8000c56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c58:	4810      	ldr	r0, [pc, #64]	; (8000c9c <MX_DAC1_Init+0x5c>)
 8000c5a:	f000 fce2 	bl	8001622 <HAL_DAC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c64:	f000 fa55 	bl	8001112 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_DAC1_Init+0x5c>)
 8000c84:	f000 fd61 	bl	800174a <HAL_DAC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 fa40 	bl	8001112 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a0 	.word	0x200000a0
 8000ca0:	40007400 	.word	0x40007400

08000ca4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <HAL_DAC_MspInit+0x74>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d124      	bne.n	8000d10 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_DAC_MspInit+0x78>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f001 f87e 	bl	8001e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40007400 	.word	0x40007400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6493      	str	r3, [r2, #72]	; 0x48
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2010      	movs	r0, #16
 8000d44:	f000 fc37 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f000 fc50 	bl	80015ee <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a33      	ldr	r2, [pc, #204]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_GPIO_Init+0xe8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f001 f9bf 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_GPIO_Init+0xec>)
 8000df6:	f001 f809 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f000 fff8 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f000 ffe9 	bl	8001e0c <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48000800 	.word	0x48000800

08000e4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_I2C1_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <MX_I2C1_Init+0x7c>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e88:	f001 f980 	bl	800218c <HAL_I2C_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e92:	f000 f93e 	bl	8001112 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e9a:	f003 f859 	bl	8003f50 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 f935 	bl	8001112 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000eac:	f003 f89b 	bl	8003fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 f92c 	bl	8001112 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000fc 	.word	0x200000fc
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	00702991 	.word	0x00702991

08000ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ac      	sub	sp, #176	; 0xb0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2288      	movs	r2, #136	; 0x88
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fbf1 	bl	80056d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <HAL_I2C_MspInit+0x11c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d170      	bne.n	8000fde <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 ff01 	bl	8004d10 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f000 f8fd 	bl	8001112 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a33      	ldr	r2, [pc, #204]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f36:	2312      	movs	r3, #18
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <HAL_I2C_MspInit+0x124>)
 8000f56:	f000 ff59 	bl	8001e0c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000f5a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f5e:	f003 f88f 	bl	8004080 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_I2C_MspInit+0x120>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ff8 <HAL_I2C_MspInit+0x12c>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fb4:	f000 fce4 	bl	8001980 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8000fbe:	f000 f8a8 	bl	8001112 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_I2C_MspInit+0x128>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201f      	movs	r0, #31
 8000fd4:	f000 faef 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fd8:	201f      	movs	r0, #31
 8000fda:	f000 fb08 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	37b0      	adds	r7, #176	; 0xb0
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	200000b4 	.word	0x200000b4
 8000ff8:	4002006c 	.word	0x4002006c

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 f95f 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f833 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f7ff fea7 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 800100e:	f7ff fe87 	bl	8000d20 <MX_DMA_Init>
  MX_DAC1_Init();
 8001012:	f7ff fe15 	bl	8000c40 <MX_DAC1_Init>
  MX_I2C1_Init();
 8001016:	f7ff ff19 	bl	8000e4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int value_dac;
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800101a:	2100      	movs	r1, #0
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <main+0x70>)
 800101e:	f000 fb22 	bl	8001666 <HAL_DAC_Start>
  SSD1306_init();
 8001022:	f7ff fa61 	bl	80004e8 <SSD1306_init>
  // GFX_draw_fill_rect(0, 0, 64, 32, WHITE);
  GFX_draw_char(10, 10, 'A', WHITE, BLACK, 2, 2);
 8001026:	2302      	movs	r3, #2
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2302      	movs	r3, #2
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2241      	movs	r2, #65	; 0x41
 8001036:	210a      	movs	r1, #10
 8001038:	200a      	movs	r0, #10
 800103a:	f7ff f8c5 	bl	80001c8 <GFX_draw_char>
  SSD1306_display_repaint();
 800103e:	f7ff fdbd 	bl	8000bbc <SSD1306_display_repaint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <main+0x70>)
 800104a:	f000 fb59 	bl	8001700 <HAL_DAC_SetValue>
	  if (value_dac<4095){
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001054:	4293      	cmp	r3, r2
 8001056:	dc03      	bgt.n	8001060 <main+0x64>
		  value_dac++;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	e001      	b.n	8001064 <main+0x68>
	  }else{
		  value_dac=0;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f000 f9a9 	bl	80013bc <HAL_Delay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
 800106a:	e7ea      	b.n	8001042 <main+0x46>
 800106c:	200000a0 	.word	0x200000a0

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b096      	sub	sp, #88	; 0x58
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2244      	movs	r2, #68	; 0x44
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fb28 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001092:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001096:	f003 f821 	bl	80040dc <HAL_PWREx_ControlVoltageScaling>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a0:	f000 f837 	bl	8001112 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010be:	230a      	movs	r3, #10
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f858 	bl	8004188 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010de:	f000 f818 	bl	8001112 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2303      	movs	r3, #3
 80010e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fc1e 	bl	800493c <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001106:	f000 f804 	bl	8001112 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3758      	adds	r7, #88	; 0x58
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001116:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x6>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x44>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_MspInit+0x44>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6613      	str	r3, [r2, #96]	; 0x60
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x44>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x44>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x44>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6593      	str	r3, [r2, #88]	; 0x58
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x44>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f8e4 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Channel6_IRQHandler+0x10>)
 80011be:	f000 fd38 	bl	8001c32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000b4 	.word	0x200000b4

080011cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <I2C1_EV_IRQHandler+0x10>)
 80011d2:	f001 fa65 	bl	80026a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000fc 	.word	0x200000fc

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f004 fa2e 	bl	8005670 <__errno>
 8001214:	4602      	mov	r2, r0
 8001216:	230c      	movs	r3, #12
 8001218:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20018000 	.word	0x20018000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000094 	.word	0x20000094
 8001248:	20000158 	.word	0x20000158

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff ffea 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f004 f9ed 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a2:	f7ff feab 	bl	8000ffc <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012b4:	08005d2c 	.word	0x08005d2c
  ldr r2, =_sbss
 80012b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012bc:	20000158 	.word	0x20000158

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_Init+0x3c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_Init+0x3c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f960 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 f80f 	bl	8001304 <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	e001      	b.n	80012f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f2:	f7ff ff13 	bl	800111c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_InitTick+0x6c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d023      	beq.n	8001360 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_InitTick+0x70>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_InitTick+0x6c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f96b 	bl	800160a <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d809      	bhi.n	8001354 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001348:	f000 f935 	bl	80015b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_InitTick+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e007      	b.n	8001364 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e004      	b.n	8001364 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e001      	b.n	8001364 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000150 	.word	0x20000150

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000150 	.word	0x20000150

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_Delay+0x40>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000008 	.word	0x20000008

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff3e 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff8e 	bl	80014f4 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5d 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff31 	bl	8001464 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e014      	b.n	800165e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	791b      	ldrb	r3, [r3, #4]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fb2d 	bl	8000ca4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_DAC_Start+0x16>
 8001678:	2302      	movs	r3, #2
 800167a:	e03b      	b.n	80016f4 <HAL_DAC_Start+0x8e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2202      	movs	r2, #2
 8001686:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2201      	movs	r2, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d118      	bne.n	80016e6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	e00f      	b.n	80016e6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016d4:	d107      	bne.n	80016e6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0202 	orr.w	r2, r2, #2
 80016e4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	3308      	adds	r3, #8
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e004      	b.n	8001734 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	3314      	adds	r3, #20
 8001732:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	461a      	mov	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b088      	sub	sp, #32
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_DAC_ConfigChannel+0x1c>
 8001762:	2302      	movs	r3, #2
 8001764:	e107      	b.n	8001976 <HAL_DAC_ConfigChannel+0x22c>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2202      	movs	r2, #2
 8001770:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b04      	cmp	r3, #4
 8001778:	d174      	bne.n	8001864 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800177a:	f7ff fe13 	bl	80013a4 <HAL_GetTick>
 800177e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d134      	bne.n	80017f0 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001786:	e011      	b.n	80017ac <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001788:	f7ff fe0c 	bl	80013a4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d90a      	bls.n	80017ac <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f043 0208 	orr.w	r2, r3, #8
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2203      	movs	r2, #3
 80017a6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0e4      	b.n	8001976 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1e6      	bne.n	8001788 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff fdfe 	bl	80013bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	6992      	ldr	r2, [r2, #24]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ca:	e01e      	b.n	800180a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017cc:	f7ff fdea 	bl	80013a4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d90a      	bls.n	80017f0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f043 0208 	orr.w	r2, r3, #8
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2203      	movs	r2, #3
 80017ea:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0c2      	b.n	8001976 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dbe8      	blt.n	80017cc <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fdde 	bl	80013bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	6992      	ldr	r2, [r2, #24]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	ea02 0103 	and.w	r1, r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	21ff      	movs	r1, #255	; 0xff
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	ea02 0103 	and.w	r1, r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	409a      	lsls	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d11d      	bne.n	80018a8 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43da      	mvns	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	22c0      	movs	r2, #192	; 0xc0
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e098      	b.n	8001ac4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_DMA_Init+0x150>)
 800199a:	429a      	cmp	r2, r3
 800199c:	d80f      	bhi.n	80019be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_DMA_Init+0x154>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_DMA_Init+0x158>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	009a      	lsls	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a48      	ldr	r2, [pc, #288]	; (8001adc <HAL_DMA_Init+0x15c>)
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
 80019bc:	e00e      	b.n	80019dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_DMA_Init+0x160>)
 80019c6:	4413      	add	r3, r2
 80019c8:	4a43      	ldr	r2, [pc, #268]	; (8001ad8 <HAL_DMA_Init+0x158>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	009a      	lsls	r2, r3, #2
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a42      	ldr	r2, [pc, #264]	; (8001ae4 <HAL_DMA_Init+0x164>)
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a36:	d039      	beq.n	8001aac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_DMA_Init+0x15c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11a      	bne.n	8001a78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_DMA_Init+0x168>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f003 031c 	and.w	r3, r3, #28
 8001a4e:	210f      	movs	r1, #15
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4924      	ldr	r1, [pc, #144]	; (8001ae8 <HAL_DMA_Init+0x168>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_DMA_Init+0x168>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 031c 	and.w	r3, r3, #28
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	491d      	ldr	r1, [pc, #116]	; (8001ae8 <HAL_DMA_Init+0x168>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
 8001a76:	e019      	b.n	8001aac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_DMA_Init+0x16c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f003 031c 	and.w	r3, r3, #28
 8001a84:	210f      	movs	r1, #15
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4917      	ldr	r1, [pc, #92]	; (8001aec <HAL_DMA_Init+0x16c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_DMA_Init+0x16c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f003 031c 	and.w	r3, r3, #28
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	4911      	ldr	r1, [pc, #68]	; (8001aec <HAL_DMA_Init+0x16c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40020407 	.word	0x40020407
 8001ad4:	bffdfff8 	.word	0xbffdfff8
 8001ad8:	cccccccd 	.word	0xcccccccd
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	bffdfbf8 	.word	0xbffdfbf8
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	400200a8 	.word	0x400200a8
 8001aec:	400204a8 	.word	0x400204a8

08001af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Start_IT+0x20>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e04b      	b.n	8001ba8 <HAL_DMA_Start_IT+0xb8>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d13a      	bne.n	8001b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f92f 	bl	8001dac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 020e 	orr.w	r2, r2, #14
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e00f      	b.n	8001b88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 020a 	orr.w	r2, r2, #10
 8001b86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d005      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e029      	b.n	8001c28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 020e 	bic.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f003 021c 	and.w	r2, r3, #28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
    }
  }
  return status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 031c 	and.w	r3, r3, #28
 8001c52:	2204      	movs	r2, #4
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d026      	beq.n	8001cac <HAL_DMA_IRQHandler+0x7a>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d021      	beq.n	8001cac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d107      	bne.n	8001c86 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0204 	bic.w	r2, r2, #4
 8001c84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 021c 	and.w	r2, r3, #28
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2104      	movs	r1, #4
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d071      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001caa:	e06c      	b.n	8001d86 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f003 031c 	and.w	r3, r3, #28
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d02e      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xec>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d029      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020a 	bic.w	r2, r2, #10
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f003 021c 	and.w	r2, r3, #28
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d038      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d1c:	e033      	b.n	8001d86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f003 031c 	and.w	r3, r3, #28
 8001d26:	2208      	movs	r2, #8
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x156>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d025      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020e 	bic.w	r2, r2, #14
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f003 021c 	and.w	r2, r3, #28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
}
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d9e:	b2db      	uxtb	r3, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 021c 	and.w	r2, r3, #28
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d108      	bne.n	8001df0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dee:	e007      	b.n	8001e00 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	e17f      	b.n	800211c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8171 	beq.w	8002116 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x40>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d118      	bne.n	8001eec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	6939      	ldr	r1, [r7, #16]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80ac 	beq.w	8002116 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_GPIO_Init+0x32c>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <HAL_GPIO_Init+0x32c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_GPIO_Init+0x32c>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd6:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_GPIO_Init+0x330>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x242>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_GPIO_Init+0x334>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x23e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x338>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x23a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <HAL_GPIO_Init+0x33c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x236>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_GPIO_Init+0x340>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x232>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x344>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x22e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x348>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x22a>
 8002032:	2306      	movs	r3, #6
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x244>
 8002036:	2307      	movs	r3, #7
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x244>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x244>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x244>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x244>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x244>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x244>
 800204e:	2300      	movs	r3, #0
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002060:	4936      	ldr	r1, [pc, #216]	; (800213c <HAL_GPIO_Init+0x330>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_GPIO_Init+0x34c>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_GPIO_Init+0x34c>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_GPIO_Init+0x34c>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_GPIO_Init+0x34c>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_GPIO_Init+0x34c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_GPIO_Init+0x34c>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_GPIO_Init+0x34c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_GPIO_Init+0x34c>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f ae78 	bne.w	8001e1c <HAL_GPIO_Init+0x10>
  }
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	48001400 	.word	0x48001400
 8002154:	48001800 	.word	0x48001800
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002178:	e002      	b.n	8002180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e081      	b.n	80022a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fe8a 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	e006      	b.n	8002214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d104      	bne.n	8002226 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	817b      	strh	r3, [r7, #10]
 80022be:	460b      	mov	r3, r1
 80022c0:	813b      	strh	r3, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 80f9 	bne.w	80024c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_I2C_Mem_Write+0x34>
 80022da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0ed      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Mem_Write+0x4e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0e6      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002302:	f7ff f84f 	bl	80013a4 <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f001 fb78 	bl	8003a0a <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d1      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2221      	movs	r2, #33	; 0x21
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800234c:	88f8      	ldrh	r0, [r7, #6]
 800234e:	893a      	ldrh	r2, [r7, #8]
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4603      	mov	r3, r0
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fe1b 	bl	8002f98 <I2C_RequestMemoryWrite>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0a9      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d90e      	bls.n	800239c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f001 fce1 	bl	8003d5c <I2C_TransferConfig>
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f001 fcd0 	bl	8003d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f001 fb62 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07b      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d034      	beq.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d130      	bne.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f001 faf4 	bl	8003a0a <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04d      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d90e      	bls.n	8002454 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	22ff      	movs	r2, #255	; 0xff
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	b2da      	uxtb	r2, r3
 8002442:	8979      	ldrh	r1, [r7, #10]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f001 fc85 	bl	8003d5c <I2C_TransferConfig>
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	b2da      	uxtb	r2, r3
 8002464:	8979      	ldrh	r1, [r7, #10]
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 fc74 	bl	8003d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d19e      	bne.n	80023bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f001 fb41 	bl	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01a      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2220      	movs	r2, #32
 8002498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_I2C_Mem_Write+0x224>)
 80024a6:	400b      	ands	r3, r1
 80024a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	f040 80c3 	bne.w	8002682 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_I2C_Mem_Write_DMA+0x34>
 8002502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b7      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002522:	d101      	bne.n	8002528 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	e0ad      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Mem_Write_DMA+0x62>
 8002532:	2302      	movs	r3, #2
 8002534:	e0a6      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2240      	movs	r2, #64	; 0x40
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a49      	ldr	r2, [pc, #292]	; (8002690 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800256c:	897a      	ldrh	r2, [r7, #10]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	2bff      	cmp	r3, #255	; 0xff
 800257a:	d903      	bls.n	8002584 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	22ff      	movs	r2, #255	; 0xff
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
 8002582:	e004      	b.n	800258e <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d109      	bne.n	80025a8 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a4:	651a      	str	r2, [r3, #80]	; 0x50
 80025a6:	e00b      	b.n	80025c0 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025a8:	893b      	ldrh	r3, [r7, #8]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80025b6:	893b      	ldrh	r3, [r7, #8]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	4a30      	ldr	r2, [pc, #192]	; (8002698 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	2200      	movs	r2, #0
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3328      	adds	r3, #40	; 0x28
 80025f4:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80025fa:	f7ff fa79 	bl	8001af0 <HAL_DMA_Start_IT>
 80025fe:	4603      	mov	r3, r0
 8002600:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d128      	bne.n	800265a <HAL_I2C_Mem_Write_DMA+0x186>
 8002608:	e013      	b.n	8002632 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e028      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_I2C_Mem_Write_DMA+0x1c8>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f001 fb8b 	bl	8003d5c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800264e:	2101      	movs	r1, #1
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f001 fbb5 	bl	8003dc0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e014      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	ffff0000 	.word	0xffff0000
 8002690:	08002b91 	.word	0x08002b91
 8002694:	0800390b 	.word	0x0800390b
 8002698:	080039a1 	.word	0x080039a1
 800269c:	80002000 	.word	0x80002000

080026a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
  }
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
 8002730:	4613      	mov	r3, r2
 8002732:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <I2C_Slave_ISR_IT+0x24>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0ec      	b.n	80029a2 <I2C_Slave_ISR_IT+0x1fe>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027e8:	6939      	ldr	r1, [r7, #16]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fe12 	bl	8003414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d04d      	beq.n	8002898 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002804:	2b00      	cmp	r3, #0
 8002806:	d047      	beq.n	8002898 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d128      	bne.n	8002864 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b28      	cmp	r3, #40	; 0x28
 800281c:	d108      	bne.n	8002830 <I2C_Slave_ISR_IT+0x8c>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002824:	d104      	bne.n	8002830 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002826:	6939      	ldr	r1, [r7, #16]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fefd 	bl	8003628 <I2C_ITListenCplt>
 800282e:	e032      	b.n	8002896 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b29      	cmp	r3, #41	; 0x29
 800283a:	d10e      	bne.n	800285a <I2C_Slave_ISR_IT+0xb6>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002842:	d00a      	beq.n	800285a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2210      	movs	r2, #16
 800284a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f001 f838 	bl	80038c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fcb5 	bl	80031c2 <I2C_ITSlaveSeqCplt>
 8002858:	e01d      	b.n	8002896 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2210      	movs	r2, #16
 8002860:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002862:	e096      	b.n	8002992 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <I2C_Slave_ISR_IT+0xe4>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	f040 8085 	bne.w	8002992 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	4619      	mov	r1, r3
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 ff20 	bl	80036d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002894:	e07d      	b.n	8002992 <I2C_Slave_ISR_IT+0x1ee>
 8002896:	e07c      	b.n	8002992 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d030      	beq.n	8002906 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02a      	beq.n	8002906 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d018      	beq.n	80028ec <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d14f      	bne.n	8002996 <I2C_Slave_ISR_IT+0x1f2>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028fc:	d04b      	beq.n	8002996 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fc5f 	bl	80031c2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002904:	e047      	b.n	8002996 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800291e:	6939      	ldr	r1, [r7, #16]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fb8d 	bl	8003040 <I2C_ITAddrCplt>
 8002926:	e037      	b.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d031      	beq.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02b      	beq.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d018      	beq.n	800297c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
 800297a:	e00d      	b.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002982:	d002      	beq.n	800298a <I2C_Slave_ISR_IT+0x1e6>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fc19 	bl	80031c2 <I2C_ITSlaveSeqCplt>
 8002990:	e002      	b.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002996:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af02      	add	r7, sp, #8
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <I2C_Master_ISR_DMA+0x1a>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0e1      	b.n	8002b88 <I2C_Master_ISR_DMA+0x1de>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029f8:	2120      	movs	r1, #32
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f001 f9e0 	bl	8003dc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 ff5e 	bl	80038c2 <I2C_Flush_TXDR>
 8002a06:	e0ba      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d072      	beq.n	8002afa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d06c      	beq.n	8002afa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04e      	beq.n	8002ad8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a46:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2bff      	cmp	r3, #255	; 0xff
 8002a50:	d906      	bls.n	8002a60 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e010      	b.n	8002a82 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a72:	d003      	beq.n	8002a7c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e002      	b.n	8002a82 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8a79      	ldrh	r1, [r7, #18]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f001 f963 	bl	8003d5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b22      	cmp	r3, #34	; 0x22
 8002ab2:	d108      	bne.n	8002ac6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ac4:	e05b      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ad6:	e052      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ae6:	d003      	beq.n	8002af0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb2d 	bl	8003148 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002aee:	e046      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fdee 	bl	80036d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002af8:	e041      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d029      	beq.n	8002b5a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d023      	beq.n	8002b5a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d119      	bne.n	8002b50 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b2a:	d027      	beq.n	8002b7c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b34:	d108      	bne.n	8002b48 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b44:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b46:	e019      	b.n	8002b7c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fafd 	bl	8003148 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b4e:	e015      	b.n	8002b7c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b50:	2140      	movs	r1, #64	; 0x40
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fdbe 	bl	80036d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b58:	e010      	b.n	8002b7c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fb83 	bl	8003280 <I2C_ITMasterCplt>
 8002b7a:	e000      	b.n	8002b7e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002b7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <I2C_Mem_ISR_DMA+0x240>)
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <I2C_Mem_ISR_DMA+0x1e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e10c      	b.n	8002dc8 <I2C_Mem_ISR_DMA+0x238>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d017      	beq.n	8002bf2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d011      	beq.n	8002bf2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002be2:	2120      	movs	r1, #32
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f001 f8eb 	bl	8003dc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fe69 	bl	80038c2 <I2C_Flush_TXDR>
 8002bf0:	e0e5      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00f      	beq.n	8002c1e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c1c:	e0cf      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	09db      	lsrs	r3, r3, #7
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d05c      	beq.n	8002ce4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d056      	beq.n	8002ce4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c36:	2110      	movs	r1, #16
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f001 f8c1 	bl	8003dc0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d048      	beq.n	8002cda <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2bff      	cmp	r3, #255	; 0xff
 8002c50:	d910      	bls.n	8002c74 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	22ff      	movs	r2, #255	; 0xff
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	b299      	uxth	r1, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f001 f875 	bl	8003d5c <I2C_TransferConfig>
 8002c72:	e011      	b.n	8002c98 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	b299      	uxth	r1, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f001 f862 	bl	8003d5c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b22      	cmp	r3, #34	; 0x22
 8002cb4:	d108      	bne.n	8002cc8 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cc6:	e07a      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cd8:	e071      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fcf9 	bl	80036d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ce2:	e06c      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d056      	beq.n	8002d9e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d050      	beq.n	8002d9e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b22      	cmp	r3, #34	; 0x22
 8002d06:	d101      	bne.n	8002d0c <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <I2C_Mem_ISR_DMA+0x244>)
 8002d0a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d910      	bls.n	8002d38 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	b299      	uxth	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f001 f813 	bl	8003d5c <I2C_TransferConfig>
 8002d36:	e011      	b.n	8002d5c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	b299      	uxth	r1, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f001 f800 	bl	8003d5c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b22      	cmp	r3, #34	; 0x22
 8002d78:	d108      	bne.n	8002d8c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d88:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d8a:	e018      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d9c:	e00f      	b.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fa61 	bl	8003280 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	80002000 	.word	0x80002000
 8002dd4:	80002400 	.word	0x80002400

08002dd8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <I2C_Slave_ISR_DMA+0x24>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e0c9      	b.n	8002f90 <I2C_Slave_ISR_DMA+0x1b8>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 faf8 	bl	8003414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 809a 	beq.w	8002f66 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8093 	beq.w	8002f66 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0b9b      	lsrs	r3, r3, #14
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0bdb      	lsrs	r3, r3, #15
 8002e50:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07f      	beq.n	8002f58 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0bdb      	lsrs	r3, r3, #15
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0b9b      	lsrs	r3, r3, #14
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d128      	bne.n	8002ef8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b28      	cmp	r3, #40	; 0x28
 8002eb0:	d108      	bne.n	8002ec4 <I2C_Slave_ISR_DMA+0xec>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb8:	d104      	bne.n	8002ec4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fbb3 	bl	8003628 <I2C_ITListenCplt>
 8002ec2:	e048      	b.n	8002f56 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b29      	cmp	r3, #41	; 0x29
 8002ece:	d10e      	bne.n	8002eee <I2C_Slave_ISR_DMA+0x116>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed6:	d00a      	beq.n	8002eee <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fcee 	bl	80038c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f96b 	bl	80031c2 <I2C_ITSlaveSeqCplt>
 8002eec:	e033      	b.n	8002f56 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002ef6:	e034      	b.n	8002f62 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f12:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <I2C_Slave_ISR_DMA+0x14a>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f20:	d11f      	bne.n	8002f62 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b21      	cmp	r3, #33	; 0x21
 8002f26:	d002      	beq.n	8002f2e <I2C_Slave_ISR_DMA+0x156>
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b29      	cmp	r3, #41	; 0x29
 8002f2c:	d103      	bne.n	8002f36 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	; 0x21
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
 8002f34:	e008      	b.n	8002f48 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b22      	cmp	r3, #34	; 0x22
 8002f3a:	d002      	beq.n	8002f42 <I2C_Slave_ISR_DMA+0x16a>
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f40:	d102      	bne.n	8002f48 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2222      	movs	r2, #34	; 0x22
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbc0 	bl	80036d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8002f54:	e005      	b.n	8002f62 <I2C_Slave_ISR_DMA+0x18a>
 8002f56:	e004      	b.n	8002f62 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f60:	e011      	b.n	8002f86 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002f62:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f64:	e00f      	b.n	8002f86 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f85d 	bl	8003040 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <I2C_RequestMemoryWrite+0xa4>)
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fecb 	bl	8003d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fd5d 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e02c      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8002fea:	e015      	b.n	8003018 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fd43 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e012      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2200      	movs	r2, #0
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fcf1 	bl	8003a0a <I2C_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	80002000 	.word	0x80002000

08003040 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003056:	2b28      	cmp	r3, #40	; 0x28
 8003058:	d16a      	bne.n	8003130 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b29b      	uxth	r3, r3
 8003074:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003078:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003086:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003094:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d138      	bne.n	8003110 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	09db      	lsrs	r3, r3, #7
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	89bb      	ldrh	r3, [r7, #12]
 80030a6:	4053      	eors	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f003 0306 	and.w	r3, r3, #6
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11c      	bne.n	80030ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d13b      	bne.n	8003140 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2208      	movs	r2, #8
 80030d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030de:	89ba      	ldrh	r2, [r7, #12]
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fb1d 	bl	8002724 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030ea:	e029      	b.n	8003140 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fecd 	bl	8003e94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003102:	89ba      	ldrh	r2, [r7, #12]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fb0b 	bl	8002724 <HAL_I2C_AddrCallback>
}
 800310e:	e017      	b.n	8003140 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 febd 	bl	8003e94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003122:	89ba      	ldrh	r2, [r7, #12]
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fafb 	bl	8002724 <HAL_I2C_AddrCallback>
}
 800312e:	e007      	b.n	8003140 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2208      	movs	r2, #8
 8003136:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b21      	cmp	r3, #33	; 0x21
 8003162:	d115      	bne.n	8003190 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2211      	movs	r2, #17
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003178:	2101      	movs	r1, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fe8a 	bl	8003e94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff faa3 	bl	80026d4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800318e:	e014      	b.n	80031ba <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2212      	movs	r2, #18
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031a4:	2102      	movs	r1, #2
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fe74 	bl	8003e94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff fa97 	bl	80026e8 <HAL_I2C_MasterRxCpltCallback>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	0b9b      	lsrs	r3, r3, #14
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e00d      	b.n	8003214 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	0bdb      	lsrs	r3, r3, #15
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003212:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b29      	cmp	r3, #41	; 0x29
 800321e:	d112      	bne.n	8003246 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2228      	movs	r2, #40	; 0x28
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800322e:	2101      	movs	r1, #1
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fe2f 	bl	8003e94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fa5c 	bl	80026fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003244:	e017      	b.n	8003276 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b2a      	cmp	r3, #42	; 0x2a
 8003250:	d111      	bne.n	8003276 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2228      	movs	r2, #40	; 0x28
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2222      	movs	r2, #34	; 0x22
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003260:	2102      	movs	r1, #2
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fe16 	bl	8003e94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fa4d 	bl	8002710 <HAL_I2C_SlaveRxCpltCallback>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2220      	movs	r2, #32
 8003294:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b21      	cmp	r3, #33	; 0x21
 80032a0:	d107      	bne.n	80032b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032a2:	2101      	movs	r1, #1
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fdf5 	bl	8003e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2211      	movs	r2, #17
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
 80032b0:	e00c      	b.n	80032cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b22      	cmp	r3, #34	; 0x22
 80032bc:	d106      	bne.n	80032cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032be:	2102      	movs	r1, #2
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fde7 	bl	8003e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2212      	movs	r2, #18
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b4d      	ldr	r3, [pc, #308]	; (800340c <I2C_ITMasterCplt+0x18c>)
 80032d8:	400b      	ands	r3, r1
 80032da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4a      	ldr	r2, [pc, #296]	; (8003410 <I2C_ITMasterCplt+0x190>)
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d10b      	bne.n	800332c <I2C_ITMasterCplt+0xac>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2db      	uxtb	r3, r3
 8003328:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800332a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fac8 	bl	80038c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b60      	cmp	r3, #96	; 0x60
 8003342:	d002      	beq.n	800334a <I2C_ITMasterCplt+0xca>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f9bf 	bl	80036d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003356:	e054      	b.n	8003402 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d124      	bne.n	80033ae <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d10b      	bne.n	8003396 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff f9e0 	bl	8002754 <HAL_I2C_MemTxCpltCallback>
}
 8003394:	e035      	b.n	8003402 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff f994 	bl	80026d4 <HAL_I2C_MasterTxCpltCallback>
}
 80033ac:	e029      	b.n	8003402 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b22      	cmp	r3, #34	; 0x22
 80033b8:	d123      	bne.n	8003402 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d10b      	bne.n	80033ec <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff f9bf 	bl	8002768 <HAL_I2C_MemRxCpltCallback>
}
 80033ea:	e00a      	b.n	8003402 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff f973 	bl	80026e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003402:	bf00      	nop
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	fe00e800 	.word	0xfe00e800
 8003410:	ffff0000 	.word	0xffff0000

08003414 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2220      	movs	r2, #32
 8003438:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b21      	cmp	r3, #33	; 0x21
 800343e:	d002      	beq.n	8003446 <I2C_ITSlaveCplt+0x32>
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b29      	cmp	r3, #41	; 0x29
 8003444:	d108      	bne.n	8003458 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003446:	f248 0101 	movw	r1, #32769	; 0x8001
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fd22 	bl	8003e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2221      	movs	r2, #33	; 0x21
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
 8003456:	e00d      	b.n	8003474 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b22      	cmp	r3, #34	; 0x22
 800345c:	d002      	beq.n	8003464 <I2C_ITSlaveCplt+0x50>
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b2a      	cmp	r3, #42	; 0x2a
 8003462:	d107      	bne.n	8003474 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003464:	f248 0102 	movw	r1, #32770	; 0x8002
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fd13 	bl	8003e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2222      	movs	r2, #34	; 0x22
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003482:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b64      	ldr	r3, [pc, #400]	; (8003620 <I2C_ITSlaveCplt+0x20c>)
 8003490:	400b      	ands	r3, r1
 8003492:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa14 	bl	80038c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	0b9b      	lsrs	r3, r3, #14
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d013      	beq.n	80034ce <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d020      	beq.n	8003500 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034cc:	e018      	b.n	8003500 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	0bdb      	lsrs	r3, r3, #15
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d012      	beq.n	8003500 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0304 	bic.w	r3, r3, #4
 8003512:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00c      	beq.n	800354e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8a7 	bl	80036d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b28      	cmp	r3, #40	; 0x28
 8003590:	d141      	bne.n	8003616 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f847 	bl	8003628 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800359a:	e03c      	b.n	8003616 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035a4:	d014      	beq.n	80035d0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fe0b 	bl	80031c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <I2C_ITSlaveCplt+0x210>)
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff f8b9 	bl	8002740 <HAL_I2C_ListenCpltCallback>
}
 80035ce:	e022      	b.n	8003616 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b22      	cmp	r3, #34	; 0x22
 80035da:	d10e      	bne.n	80035fa <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff f88c 	bl	8002710 <HAL_I2C_SlaveRxCpltCallback>
}
 80035f8:	e00d      	b.n	8003616 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f873 	bl	80026fc <HAL_I2C_SlaveTxCpltCallback>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	fe00e800 	.word	0xfe00e800
 8003624:	ffff0000 	.word	0xffff0000

08003628 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <I2C_ITListenCplt+0xa8>)
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0204 	orr.w	r2, r3, #4
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036a6:	f248 0103 	movw	r1, #32771	; 0x8003
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fbf2 	bl	8003e94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2210      	movs	r2, #16
 80036b6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff f83d 	bl	8002740 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	ffff0000 	.word	0xffff0000

080036d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a5d      	ldr	r2, [pc, #372]	; (8003868 <I2C_ITError+0x194>)
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b28      	cmp	r3, #40	; 0x28
 800370a:	d005      	beq.n	8003718 <I2C_ITError+0x44>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b29      	cmp	r3, #41	; 0x29
 8003710:	d002      	beq.n	8003718 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b2a      	cmp	r3, #42	; 0x2a
 8003716:	d10b      	bne.n	8003730 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003718:	2103      	movs	r1, #3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fbba 	bl	8003e94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2228      	movs	r2, #40	; 0x28
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a50      	ldr	r2, [pc, #320]	; (800386c <I2C_ITError+0x198>)
 800372c:	635a      	str	r2, [r3, #52]	; 0x34
 800372e:	e011      	b.n	8003754 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003730:	f248 0103 	movw	r1, #32771	; 0x8003
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fbad 	bl	8003e94 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b60      	cmp	r3, #96	; 0x60
 8003744:	d003      	beq.n	800374e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d039      	beq.n	80037d6 <I2C_ITError+0x102>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b11      	cmp	r3, #17
 8003766:	d002      	beq.n	800376e <I2C_ITError+0x9a>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b21      	cmp	r3, #33	; 0x21
 800376c:	d133      	bne.n	80037d6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377c:	d107      	bne.n	800378e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800378c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fafc 	bl	8001d90 <HAL_DMA_GetState>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d017      	beq.n	80037ce <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4a33      	ldr	r2, [pc, #204]	; (8003870 <I2C_ITError+0x19c>)
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe f9fc 	bl	8001bb0 <HAL_DMA_Abort_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d04d      	beq.n	800385a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037cc:	e045      	b.n	800385a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f850 	bl	8003874 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037d4:	e041      	b.n	800385a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d039      	beq.n	8003852 <I2C_ITError+0x17e>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d002      	beq.n	80037ea <I2C_ITError+0x116>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b22      	cmp	r3, #34	; 0x22
 80037e8:	d133      	bne.n	8003852 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d107      	bne.n	800380a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003808:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fabe 	bl	8001d90 <HAL_DMA_GetState>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d017      	beq.n	800384a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <I2C_ITError+0x19c>)
 8003820:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe f9be 	bl	8001bb0 <HAL_DMA_Abort_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d011      	beq.n	800385e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003848:	e009      	b.n	800385e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f812 	bl	8003874 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003850:	e005      	b.n	800385e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f80e 	bl	8003874 <I2C_TreatErrorCallback>
  }
}
 8003858:	e002      	b.n	8003860 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800385e:	bf00      	nop
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	ffff0000 	.word	0xffff0000
 800386c:	080027a5 	.word	0x080027a5
 8003870:	080039cf 	.word	0x080039cf

08003874 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d10e      	bne.n	80038a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe ff76 	bl	8002790 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038a4:	e009      	b.n	80038ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe ff61 	bl	800277c <HAL_I2C_ErrorCallback>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d103      	bne.n	80038e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d007      	beq.n	80038fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	619a      	str	r2, [r3, #24]
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003926:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003932:	2120      	movs	r1, #32
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa43 	bl	8003dc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800393a:	e02d      	b.n	8003998 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2bff      	cmp	r3, #255	; 0xff
 8003952:	d903      	bls.n	800395c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
 800395a:	e004      	b.n	8003966 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	4619      	mov	r1, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3328      	adds	r3, #40	; 0x28
 8003976:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800397c:	f7fe f8b8 	bl	8001af0 <HAL_DMA_Start_IT>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003986:	2110      	movs	r1, #16
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff fea3 	bl	80036d4 <I2C_ITError>
}
 800398e:	e003      	b.n	8003998 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003990:	2140      	movs	r1, #64	; 0x40
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa14 	bl	8003dc0 <I2C_Enable_IRQ>
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039bc:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80039be:	2110      	movs	r1, #16
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fe87 	bl	80036d4 <I2C_ITError>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	2200      	movs	r2, #0
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	2200      	movs	r2, #0
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ff39 	bl	8003874 <I2C_TreatErrorCallback>
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1a:	e022      	b.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a22:	d01e      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a24:	f7fd fcbe 	bl	80013a4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0cd      	beq.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a96:	e02c      	b.n	8003af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f871 	bl	8003b84 <I2C_IsErrorOccurred>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e02a      	b.n	8003b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d01e      	beq.n	8003af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fd fc76 	bl	80013a4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d113      	bne.n	8003af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e007      	b.n	8003b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d1cb      	bne.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b16:	e028      	b.n	8003b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f831 	bl	8003b84 <I2C_IsErrorOccurred>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e026      	b.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fd fc3a 	bl	80013a4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d113      	bne.n	8003b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e007      	b.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d1cf      	bne.n	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d075      	beq.n	8003c9c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bb8:	e056      	b.n	8003c68 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc0:	d052      	beq.n	8003c68 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd fbef 	bl	80013a4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_IsErrorOccurred+0x54>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d147      	bne.n	8003c68 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d12e      	bne.n	8003c5a <I2C_IsErrorOccurred+0xd6>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c02:	d02a      	beq.n	8003c5a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d027      	beq.n	8003c5a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c1a:	f7fd fbc3 	bl	80013a4 <HAL_GetTick>
 8003c1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	e01b      	b.n	8003c5a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c22:	f7fd fbbf 	bl	80013a4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b19      	cmp	r3, #25
 8003c2e:	d914      	bls.n	8003c5a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d1dc      	bne.n	8003c22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d003      	beq.n	8003c7e <I2C_IsErrorOccurred+0xfa>
 8003c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d09d      	beq.n	8003bba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f043 0308 	orr.w	r3, r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01c      	beq.n	8003d4c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff fdd5 	bl	80038c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <I2C_IsErrorOccurred+0x1d4>)
 8003d24:	400b      	ands	r3, r1
 8003d26:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	; 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	fe00e800 	.word	0xfe00e800

08003d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d74:	7a7b      	ldrb	r3, [r7, #9]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	0d5b      	lsrs	r3, r3, #21
 8003d96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <I2C_TransferConfig+0x60>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	ea02 0103 	and.w	r1, r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	03ff63ff 	.word	0x03ff63ff

08003dc0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <I2C_Enable_IRQ+0xcc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <I2C_Enable_IRQ+0xd0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d11d      	bne.n	8003e20 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da03      	bge.n	8003df4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003df2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d103      	bne.n	8003e02 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d103      	bne.n	8003e10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	2b40      	cmp	r3, #64	; 0x40
 8003e14:	d12c      	bne.n	8003e70 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e1e:	e027      	b.n	8003e70 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da03      	bge.n	8003e30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003e40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003e52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d103      	bne.n	8003e62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d103      	bne.n	8003e70 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f043 0320 	orr.w	r3, r3, #32
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	080029ab 	.word	0x080029ab
 8003e90:	08002dd9 	.word	0x08002dd9

08003e94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00f      	beq.n	8003ece <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003eb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec2:	2b28      	cmp	r3, #40	; 0x28
 8003ec4:	d003      	beq.n	8003ece <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00f      	beq.n	8003ef8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003ede:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eec:	2b28      	cmp	r3, #40	; 0x28
 8003eee:	d003      	beq.n	8003ef8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	da03      	bge.n	8003f08 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d103      	bne.n	8003f16 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d103      	bne.n	8003f24 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f043 0320 	orr.w	r3, r3, #32
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d103      	bne.n	8003f32 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d138      	bne.n	8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e032      	b.n	8003fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	; 0x24
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d139      	bne.n	8004070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004006:	2302      	movs	r3, #2
 8004008:	e033      	b.n	8004072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2224      	movs	r2, #36	; 0x24
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6613      	str	r3, [r2, #96]	; 0x60
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4905      	ldr	r1, [pc, #20]	; (80040bc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40010000 	.word	0x40010000

080040c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40007000 	.word	0x40007000

080040dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d130      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d038      	beq.n	800416c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2232      	movs	r2, #50	; 0x32
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	0c9b      	lsrs	r3, r3, #18
 800411c:	3301      	adds	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004120:	e002      	b.n	8004128 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b01      	subs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004134:	d102      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f2      	bne.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d110      	bne.n	800416c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d007      	beq.n	800416c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004164:	4a05      	ldr	r2, [pc, #20]	; (800417c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40007000 	.word	0x40007000
 8004180:	20000000 	.word	0x20000000
 8004184:	431bde83 	.word	0x431bde83

08004188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e3c6      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419a:	4ba1      	ldr	r3, [pc, #644]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a4:	4b9e      	ldr	r3, [pc, #632]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80e4 	beq.w	8004384 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_RCC_OscConfig+0x4a>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	f040 808b 	bne.w	80042e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 8087 	bne.w	80042e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041d2:	4b93      	ldr	r3, [pc, #588]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x62>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e39e      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1a      	ldr	r2, [r3, #32]
 80041ee:	4b8c      	ldr	r3, [pc, #560]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <HAL_RCC_OscConfig+0x7c>
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004202:	e005      	b.n	8004210 <HAL_RCC_OscConfig+0x88>
 8004204:	4b86      	ldr	r3, [pc, #536]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	4293      	cmp	r3, r2
 8004212:	d223      	bcs.n	800425c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fd19 	bl	8004c50 <RCC_SetFlashLatencyFromMSIRange>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e37f      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004228:	4b7d      	ldr	r3, [pc, #500]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7c      	ldr	r2, [pc, #496]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800422e:	f043 0308 	orr.w	r3, r3, #8
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4977      	ldr	r1, [pc, #476]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004246:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	4972      	ldr	r1, [pc, #456]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004256:	4313      	orrs	r3, r2
 8004258:	604b      	str	r3, [r1, #4]
 800425a:	e025      	b.n	80042a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	4b70      	ldr	r3, [pc, #448]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6f      	ldr	r2, [pc, #444]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b6d      	ldr	r3, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	496a      	ldr	r1, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427a:	4b69      	ldr	r3, [pc, #420]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4965      	ldr	r1, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fcd9 	bl	8004c50 <RCC_SetFlashLatencyFromMSIRange>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e33f      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042a8:	f000 fc48 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 80042ac:	4601      	mov	r1, r0
 80042ae:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	4a5a      	ldr	r2, [pc, #360]	; (8004424 <HAL_RCC_OscConfig+0x29c>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa21 f303 	lsr.w	r3, r1, r3
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x2a0>)
 80042c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042c8:	4b58      	ldr	r3, [pc, #352]	; (800442c <HAL_RCC_OscConfig+0x2a4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd f819 	bl	8001304 <HAL_InitTick>
 80042d2:	4603      	mov	r3, r0
 80042d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d052      	beq.n	8004382 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	e323      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d032      	beq.n	800434e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042e8:	4b4d      	ldr	r3, [pc, #308]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4c      	ldr	r2, [pc, #304]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042f4:	f7fd f856 	bl	80013a4 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042fc:	f7fd f852 	bl	80013a4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e30c      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800430e:	4b44      	ldr	r3, [pc, #272]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800431a:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a40      	ldr	r2, [pc, #256]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004320:	f043 0308 	orr.w	r3, r3, #8
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	493b      	ldr	r1, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4936      	ldr	r1, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	e01a      	b.n	8004384 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a33      	ldr	r2, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800435a:	f7fd f823 	bl	80013a4 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004362:	f7fd f81f 	bl	80013a4 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e2d9      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004374:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x1da>
 8004380:	e000      	b.n	8004384 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004382:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d074      	beq.n	800447a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x21a>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d10e      	bne.n	80043ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d10b      	bne.n	80043ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d064      	beq.n	8004478 <HAL_RCC_OscConfig+0x2f0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d160      	bne.n	8004478 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e2b6      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x24a>
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	e01d      	b.n	800440e <HAL_RCC_OscConfig+0x286>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043da:	d10c      	bne.n	80043f6 <HAL_RCC_OscConfig+0x26e>
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e00b      	b.n	800440e <HAL_RCC_OscConfig+0x286>
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <HAL_RCC_OscConfig+0x298>)
 8004408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01c      	beq.n	8004450 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fc ffc5 	bl	80013a4 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441c:	e011      	b.n	8004442 <HAL_RCC_OscConfig+0x2ba>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	08005ce4 	.word	0x08005ce4
 8004428:	20000000 	.word	0x20000000
 800442c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fc ffb8 	bl	80013a4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e272      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004442:	4baf      	ldr	r3, [pc, #700]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x2a8>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc ffa8 	bl	80013a4 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc ffa4 	bl	80013a4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e25e      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800446a:	4ba5      	ldr	r3, [pc, #660]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d0>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d060      	beq.n	8004548 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x310>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d119      	bne.n	80044c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	4b99      	ldr	r3, [pc, #612]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_OscConfig+0x328>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e23b      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b93      	ldr	r3, [pc, #588]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	061b      	lsls	r3, r3, #24
 80044be:	4990      	ldr	r1, [pc, #576]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c4:	e040      	b.n	8004548 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d023      	beq.n	8004516 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ce:	4b8c      	ldr	r3, [pc, #560]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a8b      	ldr	r2, [pc, #556]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fc ff63 	bl	80013a4 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fc ff5f 	bl	80013a4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e219      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f4:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b7f      	ldr	r3, [pc, #508]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	497c      	ldr	r1, [pc, #496]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	e018      	b.n	8004548 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b7a      	ldr	r3, [pc, #488]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a79      	ldr	r2, [pc, #484]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fc ff3f 	bl	80013a4 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452a:	f7fc ff3b 	bl	80013a4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1f5      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800453c:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03c      	beq.n	80045ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fc ff1a 	bl	80013a4 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004574:	f7fc ff16 	bl	80013a4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1d0      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004586:	4b5e      	ldr	r3, [pc, #376]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <HAL_RCC_OscConfig+0x3ec>
 8004594:	e01b      	b.n	80045ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004596:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fc fefd 	bl	80013a4 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ae:	f7fc fef9 	bl	80013a4 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1b3      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c0:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80045c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1ef      	bne.n	80045ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80a6 	beq.w	8004728 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045dc:	2300      	movs	r3, #0
 80045de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045e0:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10d      	bne.n	8004608 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	4b44      	ldr	r3, [pc, #272]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	4a43      	ldr	r2, [pc, #268]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6593      	str	r3, [r2, #88]	; 0x58
 80045f8:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004604:	2301      	movs	r3, #1
 8004606:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_RCC_OscConfig+0x57c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d118      	bne.n	8004646 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004614:	4b3b      	ldr	r3, [pc, #236]	; (8004704 <HAL_RCC_OscConfig+0x57c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a3a      	ldr	r2, [pc, #232]	; (8004704 <HAL_RCC_OscConfig+0x57c>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004620:	f7fc fec0 	bl	80013a4 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fc febc 	bl	80013a4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e176      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463a:	4b32      	ldr	r3, [pc, #200]	; (8004704 <HAL_RCC_OscConfig+0x57c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d108      	bne.n	8004660 <HAL_RCC_OscConfig+0x4d8>
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800465e:	e024      	b.n	80046aa <HAL_RCC_OscConfig+0x522>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d110      	bne.n	800468a <HAL_RCC_OscConfig+0x502>
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	4a24      	ldr	r2, [pc, #144]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	4a20      	ldr	r2, [pc, #128]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004688:	e00f      	b.n	80046aa <HAL_RCC_OscConfig+0x522>
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800469a:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80046a2:	f023 0304 	bic.w	r3, r3, #4
 80046a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fc fe77 	bl	80013a4 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fc fe73 	bl	80013a4 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e12b      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x578>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ed      	beq.n	80046ba <HAL_RCC_OscConfig+0x532>
 80046de:	e01a      	b.n	8004716 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fc fe60 	bl	80013a4 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046e6:	e00f      	b.n	8004708 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fc fe5c 	bl	80013a4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d906      	bls.n	8004708 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e114      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004708:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e8      	bne.n	80046e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b84      	ldr	r3, [pc, #528]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	4a83      	ldr	r2, [pc, #524]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80fa 	beq.w	8004926 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	2b02      	cmp	r3, #2
 8004738:	f040 80d0 	bne.w	80048dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800473c:	4b7c      	ldr	r3, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0203 	and.w	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d130      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	3b01      	subs	r3, #1
 800475c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d127      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d11f      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800477c:	2a07      	cmp	r2, #7
 800477e:	bf14      	ite	ne
 8004780:	2201      	movne	r2, #1
 8004782:	2200      	moveq	r2, #0
 8004784:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004786:	4293      	cmp	r3, r2
 8004788:	d113      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d06e      	beq.n	8004890 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d069      	beq.n	800488c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047b8:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047c4:	4b5a      	ldr	r3, [pc, #360]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0a9      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a55      	ldr	r2, [pc, #340]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047e0:	f7fc fde0 	bl	80013a4 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fc fddc 	bl	80013a4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e096      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fa:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004806:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_OscConfig+0x7ac>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004816:	3a01      	subs	r2, #1
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	4311      	orrs	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004820:	0212      	lsls	r2, r2, #8
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004828:	0852      	lsrs	r2, r2, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	0552      	lsls	r2, r2, #21
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004834:	0852      	lsrs	r2, r2, #1
 8004836:	3a01      	subs	r2, #1
 8004838:	0652      	lsls	r2, r2, #25
 800483a:	4311      	orrs	r1, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004840:	0912      	lsrs	r2, r2, #4
 8004842:	0452      	lsls	r2, r2, #17
 8004844:	430a      	orrs	r2, r1
 8004846:	493a      	ldr	r1, [pc, #232]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004848:	4313      	orrs	r3, r2
 800484a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800484c:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a37      	ldr	r2, [pc, #220]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004856:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a34      	ldr	r2, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004864:	f7fc fd9e 	bl	80013a4 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fc fd9a 	bl	80013a4 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e054      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800488a:	e04c      	b.n	8004926 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e04b      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d144      	bne.n	8004926 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a23      	ldr	r2, [pc, #140]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a8:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048b4:	f7fc fd76 	bl	80013a4 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fc fd72 	bl	80013a4 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e02c      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x734>
 80048da:	e024      	b.n	8004926 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d01f      	beq.n	8004922 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 80048e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fc fd59 	bl	80013a4 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fc fd55 	bl	80013a4 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e00f      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	4905      	ldr	r1, [pc, #20]	; (8004930 <HAL_RCC_OscConfig+0x7a8>)
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCC_OscConfig+0x7b0>)
 800491c:	4013      	ands	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
 8004920:	e001      	b.n	8004926 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	f99d808c 	.word	0xf99d808c
 8004938:	feeefffc 	.word	0xfeeefffc

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0e7      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b75      	ldr	r3, [pc, #468]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d910      	bls.n	8004980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	4970      	ldr	r1, [pc, #448]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0cf      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	4b66      	ldr	r3, [pc, #408]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004998:	429a      	cmp	r2, r3
 800499a:	d908      	bls.n	80049ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499c:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4960      	ldr	r1, [pc, #384]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04c      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d121      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e0a6      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049da:	4b54      	ldr	r3, [pc, #336]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d115      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e09a      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049f2:	4b4e      	ldr	r3, [pc, #312]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e08e      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e086      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4943      	ldr	r1, [pc, #268]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fc fcbe 	bl	80013a4 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fc fcba 	bl	80013a4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e06e      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d010      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d208      	bcs.n	8004a82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	492b      	ldr	r1, [pc, #172]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d210      	bcs.n	8004ab2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 0207 	bic.w	r2, r3, #7
 8004a98:	4923      	ldr	r1, [pc, #140]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa0:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e036      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4918      	ldr	r1, [pc, #96]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af0:	f000 f824 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004af4:	4601      	mov	r1, r0
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1f4>)
 8004b02:	5cd3      	ldrb	r3, [r2, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa21 f303 	lsr.w	r3, r1, r3
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1f8>)
 8004b0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1fc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fc fbf5 	bl	8001304 <HAL_InitTick>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	08005ce4 	.word	0x08005ce4
 8004b34:	20000000 	.word	0x20000000
 8004b38:	20000004 	.word	0x20000004

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b54:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x34>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d121      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d11e      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b70:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b7c:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	e005      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b8c:	4b2c      	ldr	r3, [pc, #176]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d102      	bne.n	8004bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bb4:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bc0:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d133      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d002      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004bde:	e005      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004be2:	617b      	str	r3, [r7, #20]
      break;
 8004be4:	e005      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004be8:	617b      	str	r3, [r7, #20]
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	617b      	str	r3, [r7, #20]
      break;
 8004bf0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bf2:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	fb02 f203 	mul.w	r2, r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	0e5b      	lsrs	r3, r3, #25
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	3301      	adds	r3, #1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c32:	69bb      	ldr	r3, [r7, #24]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3724      	adds	r7, #36	; 0x24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000
 8004c44:	08005cf4 	.word	0x08005cf4
 8004c48:	00f42400 	.word	0x00f42400
 8004c4c:	007a1200 	.word	0x007a1200

08004c50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c68:	f7ff fa2a 	bl	80040c0 <HAL_PWREx_GetVoltageRange>
 8004c6c:	6178      	str	r0, [r7, #20]
 8004c6e:	e014      	b.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c88:	f7ff fa1a 	bl	80040c0 <HAL_PWREx_GetVoltageRange>
 8004c8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d10b      	bne.n	8004cba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b80      	cmp	r3, #128	; 0x80
 8004ca6:	d919      	bls.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2ba0      	cmp	r3, #160	; 0xa0
 8004cac:	d902      	bls.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cae:	2302      	movs	r3, #2
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e013      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e010      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d902      	bls.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e00a      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d102      	bne.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ccc:	2302      	movs	r3, #2
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e004      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b70      	cmp	r3, #112	; 0x70
 8004cd6:	d101      	bne.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 0207 	bic.w	r2, r3, #7
 8004ce4:	4909      	ldr	r1, [pc, #36]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40022000 	.word	0x40022000

08004d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d18:	2300      	movs	r3, #0
 8004d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03f      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d34:	d01c      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d802      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d40:	e01f      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d46:	d003      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d4c:	d01c      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d4e:	e018      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a84      	ldr	r2, [pc, #528]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d5c:	e015      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fab9 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d6e:	e00c      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3320      	adds	r3, #32
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fba0 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d80:	e003      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	74fb      	strb	r3, [r7, #19]
      break;
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d90:	4b75      	ldr	r3, [pc, #468]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9e:	4972      	ldr	r1, [pc, #456]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004da6:	e001      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	7cfb      	ldrb	r3, [r7, #19]
 8004daa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d03f      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dc0:	d01c      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dc6:	d802      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00e      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004dcc:	e01f      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd2:	d003      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004dd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd8:	d01c      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004dda:	e018      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ddc:	4b62      	ldr	r3, [pc, #392]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a61      	ldr	r2, [pc, #388]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de8:	e015      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fa73 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dfa:	e00c      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3320      	adds	r3, #32
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb5a 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	74fb      	strb	r3, [r7, #19]
      break;
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e16:	7cfb      	ldrb	r3, [r7, #19]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e1c:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e2a:	494f      	ldr	r1, [pc, #316]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e32:	e001      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80a0 	beq.w	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e60:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e7c:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3a      	ldr	r2, [pc, #232]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e88:	f7fc fa8c 	bl	80013a4 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e8e:	e009      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fc fa88 	bl	80013a4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d902      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ef      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d15c      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01f      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ee0:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fc fa47 	bl	80013a4 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f18:	e00b      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fc fa43 	bl	80013a4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d902      	bls.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f30:	e006      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ec      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f56:	4904      	ldr	r1, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f5e:	e009      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	74bb      	strb	r3, [r7, #18]
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f74:	7c7b      	ldrb	r3, [r7, #17]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7a:	4b9e      	ldr	r3, [pc, #632]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	4a9d      	ldr	r2, [pc, #628]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f92:	4b98      	ldr	r3, [pc, #608]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f023 0203 	bic.w	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	4994      	ldr	r1, [pc, #592]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb4:	4b8f      	ldr	r3, [pc, #572]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f023 020c 	bic.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	498c      	ldr	r1, [pc, #560]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd6:	4b87      	ldr	r3, [pc, #540]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	4983      	ldr	r1, [pc, #524]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff8:	4b7e      	ldr	r3, [pc, #504]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	497b      	ldr	r1, [pc, #492]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800501a:	4b76      	ldr	r3, [pc, #472]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005028:	4972      	ldr	r1, [pc, #456]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800503c:	4b6d      	ldr	r3, [pc, #436]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	496a      	ldr	r1, [pc, #424]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800505e:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	4961      	ldr	r1, [pc, #388]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005080:	4b5c      	ldr	r3, [pc, #368]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	4959      	ldr	r1, [pc, #356]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	4950      	ldr	r1, [pc, #320]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c4:	4b4b      	ldr	r3, [pc, #300]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	4948      	ldr	r1, [pc, #288]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e6:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	493f      	ldr	r1, [pc, #252]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d028      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005108:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005116:	4937      	ldr	r1, [pc, #220]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005126:	d106      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005128:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	60d3      	str	r3, [r2, #12]
 8005134:	e011      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800513a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800513e:	d10c      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	2101      	movs	r1, #1
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f8c8 	bl	80052dc <RCCEx_PLLSAI1_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d028      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	491f      	ldr	r1, [pc, #124]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005184:	d106      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005186:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800518c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005190:	60d3      	str	r3, [r2, #12]
 8005192:	e011      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800519c:	d10c      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 f899 	bl	80052dc <RCCEx_PLLSAI1_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ae:	7cfb      	ldrb	r3, [r7, #19]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e2:	d109      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a02      	ldr	r2, [pc, #8]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ee:	60d3      	str	r3, [r2, #12]
 80051f0:	e014      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005200:	d10c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f000 f867 	bl	80052dc <RCCEx_PLLSAI1_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005236:	4928      	ldr	r1, [pc, #160]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005246:	d10d      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f844 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d014      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	74bb      	strb	r3, [r7, #18]
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526c:	d10c      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3320      	adds	r3, #32
 8005272:	2102      	movs	r1, #2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f921 	bl	80054bc <RCCEx_PLLSAI2_Config>
 800527a:	4603      	mov	r3, r0
 800527c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a2:	490d      	ldr	r1, [pc, #52]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c6:	4904      	ldr	r1, [pc, #16]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000

080052dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ea:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d018      	beq.n	8005328 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f6:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0203 	and.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d10d      	bne.n	8005322 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
       ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800530e:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
       ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d044      	beq.n	80053ac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
 8005326:	e041      	b.n	80053ac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d00c      	beq.n	800534a <RCCEx_PLLSAI1_Config+0x6e>
 8005330:	2b03      	cmp	r3, #3
 8005332:	d013      	beq.n	800535c <RCCEx_PLLSAI1_Config+0x80>
 8005334:	2b01      	cmp	r3, #1
 8005336:	d120      	bne.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005338:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11d      	bne.n	8005380 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005348:	e01a      	b.n	8005380 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800534a:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	2b00      	cmp	r3, #0
 8005354:	d116      	bne.n	8005384 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800535a:	e013      	b.n	8005384 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535c:	4b56      	ldr	r3, [pc, #344]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10f      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005368:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005378:	e006      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	73fb      	strb	r3, [r7, #15]
      break;
 800537e:	e004      	b.n	800538a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005388:	bf00      	nop
    }

    if(status == HAL_OK)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005390:	4b49      	ldr	r3, [pc, #292]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6819      	ldr	r1, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	430b      	orrs	r3, r1
 80053a6:	4944      	ldr	r1, [pc, #272]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d17d      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053be:	f7fb fff1 	bl	80013a4 <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c4:	e009      	b.n	80053da <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c6:	f7fb ffed 	bl	80013a4 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d902      	bls.n	80053da <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	73fb      	strb	r3, [r7, #15]
        break;
 80053d8:	e005      	b.n	80053e6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ef      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d160      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d111      	bne.n	8005416 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	0211      	lsls	r1, r2, #8
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68d2      	ldr	r2, [r2, #12]
 8005408:	0912      	lsrs	r2, r2, #4
 800540a:	0452      	lsls	r2, r2, #17
 800540c:	430a      	orrs	r2, r1
 800540e:	492a      	ldr	r1, [pc, #168]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005410:	4313      	orrs	r3, r2
 8005412:	610b      	str	r3, [r1, #16]
 8005414:	e027      	b.n	8005466 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d112      	bne.n	8005442 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541c:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6912      	ldr	r2, [r2, #16]
 8005432:	0852      	lsrs	r2, r2, #1
 8005434:	3a01      	subs	r2, #1
 8005436:	0552      	lsls	r2, r2, #21
 8005438:	430a      	orrs	r2, r1
 800543a:	491f      	ldr	r1, [pc, #124]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]
 8005440:	e011      	b.n	8005466 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800544a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6892      	ldr	r2, [r2, #8]
 8005452:	0211      	lsls	r1, r2, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6952      	ldr	r2, [r2, #20]
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	3a01      	subs	r2, #1
 800545c:	0652      	lsls	r2, r2, #25
 800545e:	430a      	orrs	r2, r1
 8005460:	4915      	ldr	r1, [pc, #84]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800546c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005470:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fb ff97 	bl	80013a4 <HAL_GetTick>
 8005476:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005478:	e009      	b.n	800548e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800547a:	f7fb ff93 	bl	80013a4 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d902      	bls.n	800548e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	73fb      	strb	r3, [r7, #15]
          break;
 800548c:	e005      	b.n	800549a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800548e:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ef      	beq.n	800547a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4903      	ldr	r1, [pc, #12]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000

080054bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ca:	4b68      	ldr	r3, [pc, #416]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054d6:	4b65      	ldr	r3, [pc, #404]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10d      	bne.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
       ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d044      	beq.n	800558c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e041      	b.n	800558c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d00c      	beq.n	800552a <RCCEx_PLLSAI2_Config+0x6e>
 8005510:	2b03      	cmp	r3, #3
 8005512:	d013      	beq.n	800553c <RCCEx_PLLSAI2_Config+0x80>
 8005514:	2b01      	cmp	r3, #1
 8005516:	d120      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005518:	4b54      	ldr	r3, [pc, #336]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11d      	bne.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005528:	e01a      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800552a:	4b50      	ldr	r3, [pc, #320]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e013      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800553c:	4b4b      	ldr	r3, [pc, #300]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005548:	4b48      	ldr	r3, [pc, #288]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005558:	e006      	b.n	8005568 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e004      	b.n	800556a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005560:	bf00      	nop
 8005562:	e002      	b.n	800556a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005564:	bf00      	nop
 8005566:	e000      	b.n	800556a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005568:	bf00      	nop
    }

    if(status == HAL_OK)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005570:	4b3e      	ldr	r3, [pc, #248]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	3b01      	subs	r3, #1
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	430b      	orrs	r3, r1
 8005586:	4939      	ldr	r1, [pc, #228]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d167      	bne.n	8005662 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005592:	4b36      	ldr	r3, [pc, #216]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a35      	ldr	r2, [pc, #212]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559e:	f7fb ff01 	bl	80013a4 <HAL_GetTick>
 80055a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055a4:	e009      	b.n	80055ba <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055a6:	f7fb fefd 	bl	80013a4 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d902      	bls.n	80055ba <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	73fb      	strb	r3, [r7, #15]
        break;
 80055b8:	e005      	b.n	80055c6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ba:	4b2c      	ldr	r3, [pc, #176]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1ef      	bne.n	80055a6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d14a      	bne.n	8005662 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d111      	bne.n	80055f6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d2:	4b26      	ldr	r3, [pc, #152]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68d2      	ldr	r2, [r2, #12]
 80055e8:	0912      	lsrs	r2, r2, #4
 80055ea:	0452      	lsls	r2, r2, #17
 80055ec:	430a      	orrs	r2, r1
 80055ee:	491f      	ldr	r1, [pc, #124]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	614b      	str	r3, [r1, #20]
 80055f4:	e011      	b.n	800561a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6892      	ldr	r2, [r2, #8]
 8005606:	0211      	lsls	r1, r2, #8
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6912      	ldr	r2, [r2, #16]
 800560c:	0852      	lsrs	r2, r2, #1
 800560e:	3a01      	subs	r2, #1
 8005610:	0652      	lsls	r2, r2, #25
 8005612:	430a      	orrs	r2, r1
 8005614:	4915      	ldr	r1, [pc, #84]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005616:	4313      	orrs	r3, r2
 8005618:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a13      	ldr	r2, [pc, #76]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005624:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005626:	f7fb febd 	bl	80013a4 <HAL_GetTick>
 800562a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800562c:	e009      	b.n	8005642 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800562e:	f7fb feb9 	bl	80013a4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d902      	bls.n	8005642 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	73fb      	strb	r3, [r7, #15]
          break;
 8005640:	e005      	b.n	800564e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0ef      	beq.n	800562e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	4903      	ldr	r1, [pc, #12]	; (800566c <RCCEx_PLLSAI2_Config+0x1b0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000

08005670 <__errno>:
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <__errno+0x8>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	2000000c 	.word	0x2000000c

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4e0d      	ldr	r6, [pc, #52]	; (80056b4 <__libc_init_array+0x38>)
 8005680:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005682:	1ba4      	subs	r4, r4, r6
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	2500      	movs	r5, #0
 8005688:	42a5      	cmp	r5, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	4e0b      	ldr	r6, [pc, #44]	; (80056bc <__libc_init_array+0x40>)
 800568e:	4c0c      	ldr	r4, [pc, #48]	; (80056c0 <__libc_init_array+0x44>)
 8005690:	f000 f894 	bl	80057bc <_init>
 8005694:	1ba4      	subs	r4, r4, r6
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	2500      	movs	r5, #0
 800569a:	42a5      	cmp	r5, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a4:	4798      	blx	r3
 80056a6:	3501      	adds	r5, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056ae:	4798      	blx	r3
 80056b0:	3501      	adds	r5, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08005d24 	.word	0x08005d24
 80056b8:	08005d24 	.word	0x08005d24
 80056bc:	08005d24 	.word	0x08005d24
 80056c0:	08005d28 	.word	0x08005d28

080056c4 <malloc>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <malloc+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 b80b 	b.w	80056e4 <_malloc_r>
 80056ce:	bf00      	nop
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <memset>:
 80056d4:	4402      	add	r2, r0
 80056d6:	4603      	mov	r3, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <_malloc_r>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	1ccd      	adds	r5, r1, #3
 80056e8:	f025 0503 	bic.w	r5, r5, #3
 80056ec:	3508      	adds	r5, #8
 80056ee:	2d0c      	cmp	r5, #12
 80056f0:	bf38      	it	cc
 80056f2:	250c      	movcc	r5, #12
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	4606      	mov	r6, r0
 80056f8:	db01      	blt.n	80056fe <_malloc_r+0x1a>
 80056fa:	42a9      	cmp	r1, r5
 80056fc:	d903      	bls.n	8005706 <_malloc_r+0x22>
 80056fe:	230c      	movs	r3, #12
 8005700:	6033      	str	r3, [r6, #0]
 8005702:	2000      	movs	r0, #0
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	f000 f857 	bl	80057b8 <__malloc_lock>
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <_malloc_r+0xac>)
 800570c:	6814      	ldr	r4, [r2, #0]
 800570e:	4621      	mov	r1, r4
 8005710:	b991      	cbnz	r1, 8005738 <_malloc_r+0x54>
 8005712:	4c20      	ldr	r4, [pc, #128]	; (8005794 <_malloc_r+0xb0>)
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	b91b      	cbnz	r3, 8005720 <_malloc_r+0x3c>
 8005718:	4630      	mov	r0, r6
 800571a:	f000 f83d 	bl	8005798 <_sbrk_r>
 800571e:	6020      	str	r0, [r4, #0]
 8005720:	4629      	mov	r1, r5
 8005722:	4630      	mov	r0, r6
 8005724:	f000 f838 	bl	8005798 <_sbrk_r>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d124      	bne.n	8005776 <_malloc_r+0x92>
 800572c:	230c      	movs	r3, #12
 800572e:	6033      	str	r3, [r6, #0]
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f842 	bl	80057ba <__malloc_unlock>
 8005736:	e7e4      	b.n	8005702 <_malloc_r+0x1e>
 8005738:	680b      	ldr	r3, [r1, #0]
 800573a:	1b5b      	subs	r3, r3, r5
 800573c:	d418      	bmi.n	8005770 <_malloc_r+0x8c>
 800573e:	2b0b      	cmp	r3, #11
 8005740:	d90f      	bls.n	8005762 <_malloc_r+0x7e>
 8005742:	600b      	str	r3, [r1, #0]
 8005744:	50cd      	str	r5, [r1, r3]
 8005746:	18cc      	adds	r4, r1, r3
 8005748:	4630      	mov	r0, r6
 800574a:	f000 f836 	bl	80057ba <__malloc_unlock>
 800574e:	f104 000b 	add.w	r0, r4, #11
 8005752:	1d23      	adds	r3, r4, #4
 8005754:	f020 0007 	bic.w	r0, r0, #7
 8005758:	1ac3      	subs	r3, r0, r3
 800575a:	d0d3      	beq.n	8005704 <_malloc_r+0x20>
 800575c:	425a      	negs	r2, r3
 800575e:	50e2      	str	r2, [r4, r3]
 8005760:	e7d0      	b.n	8005704 <_malloc_r+0x20>
 8005762:	428c      	cmp	r4, r1
 8005764:	684b      	ldr	r3, [r1, #4]
 8005766:	bf16      	itet	ne
 8005768:	6063      	strne	r3, [r4, #4]
 800576a:	6013      	streq	r3, [r2, #0]
 800576c:	460c      	movne	r4, r1
 800576e:	e7eb      	b.n	8005748 <_malloc_r+0x64>
 8005770:	460c      	mov	r4, r1
 8005772:	6849      	ldr	r1, [r1, #4]
 8005774:	e7cc      	b.n	8005710 <_malloc_r+0x2c>
 8005776:	1cc4      	adds	r4, r0, #3
 8005778:	f024 0403 	bic.w	r4, r4, #3
 800577c:	42a0      	cmp	r0, r4
 800577e:	d005      	beq.n	800578c <_malloc_r+0xa8>
 8005780:	1a21      	subs	r1, r4, r0
 8005782:	4630      	mov	r0, r6
 8005784:	f000 f808 	bl	8005798 <_sbrk_r>
 8005788:	3001      	adds	r0, #1
 800578a:	d0cf      	beq.n	800572c <_malloc_r+0x48>
 800578c:	6025      	str	r5, [r4, #0]
 800578e:	e7db      	b.n	8005748 <_malloc_r+0x64>
 8005790:	20000098 	.word	0x20000098
 8005794:	2000009c 	.word	0x2000009c

08005798 <_sbrk_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4c06      	ldr	r4, [pc, #24]	; (80057b4 <_sbrk_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4605      	mov	r5, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	f7fb fd1c 	bl	80011e0 <_sbrk>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_sbrk_r+0x1a>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_sbrk_r+0x1a>
 80057b0:	602b      	str	r3, [r5, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000154 	.word	0x20000154

080057b8 <__malloc_lock>:
 80057b8:	4770      	bx	lr

080057ba <__malloc_unlock>:
 80057ba:	4770      	bx	lr

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
